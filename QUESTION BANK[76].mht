MIME-Version: 1.0
Content-Type: multipart/related; boundary="----=_NextPart_01DB49C6.CF2CBED0"

This document is a Single File Web Page, also known as a Web Archive file.  If you are seeing this message, your browser or editor doesn't support Web Archive files.  Please download a browser that supports Web Archive, such as Windows® Internet Explorer®.

------=_NextPart_01DB49C6.CF2CBED0
Content-Location: file:///C:/E0C362E5/QUESTIONBANK76.htm
Content-Transfer-Encoding: quoted-printable
Content-Type: text/html; charset="us-ascii"

<html xmlns:v=3D"urn:schemas-microsoft-com:vml"
xmlns:o=3D"urn:schemas-microsoft-com:office:office"
xmlns:w=3D"urn:schemas-microsoft-com:office:word"
xmlns:dt=3D"uuid:C2F41010-65B3-11d1-A29F-00AA00C14882"
xmlns:m=3D"http://schemas.microsoft.com/office/2004/12/omml"
xmlns=3D"http://www.w3.org/TR/REC-html40">

<head>
<meta http-equiv=3DContent-Type content=3D"text/html; charset=3Dus-ascii">
<meta name=3DProgId content=3DWord.Document>
<meta name=3DGenerator content=3D"Microsoft Word 15">
<meta name=3DOriginator content=3D"Microsoft Word 15">
<link rel=3DFile-List href=3D"QUESTIONBANK76_files/filelist.xml">
<!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Author>Zafar Ali Inamdar</o:Author>
  <o:Template>Normal</o:Template>
  <o:LastAuthor>hp</o:LastAuthor>
  <o:Revision>2</o:Revision>
  <o:TotalTime>1</o:TotalTime>
  <o:Created>2024-12-08T17:43:00Z</o:Created>
  <o:LastSaved>2024-12-08T17:43:00Z</o:LastSaved>
  <o:Pages>26</o:Pages>
  <o:Words>6528</o:Words>
  <o:Characters>37213</o:Characters>
  <o:Lines>310</o:Lines>
  <o:Paragraphs>87</o:Paragraphs>
  <o:CharactersWithSpaces>43654</o:CharactersWithSpaces>
  <o:Version>15.00</o:Version>
 </o:DocumentProperties>
 <o:CustomDocumentProperties>
  <o:KSOProductBuildVer dt:dt=3D"string">2057-12.2.0.18639</o:KSOProductBui=
ldVer>
  <o:ICV dt:dt=3D"string">00B77985AA79415AA8B05BCF5BD7A617_11</o:ICV>
 </o:CustomDocumentProperties>
</xml><![endif]-->
<link rel=3DthemeData href=3D"QUESTIONBANK76_files/themedata.thmx">
<link rel=3DcolorSchemeMapping href=3D"QUESTIONBANK76_files/colorschememapp=
ing.xml">
<!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:TrackMoves>false</w:TrackMoves>
  <w:TrackFormatting/>
  <w:DrawingGridVerticalSpacing>7.8 pt</w:DrawingGridVerticalSpacing>
  <w:ValidateAgainstSchemas/>
  <w:SaveIfXMLInvalid>false</w:SaveIfXMLInvalid>
  <w:IgnoreMixedContent>false</w:IgnoreMixedContent>
  <w:AlwaysShowPlaceholderText>false</w:AlwaysShowPlaceholderText>
  <w:DoNotPromoteQF/>
  <w:LidThemeOther>EN-US</w:LidThemeOther>
  <w:LidThemeAsian>ZH-CN</w:LidThemeAsian>
  <w:LidThemeComplexScript>X-NONE</w:LidThemeComplexScript>
  <w:Compatibility>
   <w:SpaceForUL/>
   <w:DoNotLeaveBackslashAlone/>
   <w:ULTrailSpace/>
   <w:DoNotExpandShiftReturn/>
   <w:AdjustLineHeightInTable/>
   <w:BreakWrappedTables/>
   <w:SnapToGridInCell/>
   <w:UseWord2010TableStyleRules/>
   <w:DontGrowAutofit/>
   <w:DontUseIndentAsNumberingTabStop/>
   <w:SplitPgBreakAndParaMark/>
   <w:EnableOpenTypeKerning/>
   <w:DontFlipMirrorIndents/>
   <w:OverrideTableStyleHps/>
   <w:UseFELayout/>
  </w:Compatibility>
  <w:DoNotOptimizeForBrowser/>
  <m:mathPr>
   <m:mathFont m:val=3D"Cambria Math"/>
   <m:brkBin m:val=3D"before"/>
   <m:brkBinSub m:val=3D"&#45;-"/>
   <m:smallFrac m:val=3D"off"/>
   <m:dispDef/>
   <m:lMargin m:val=3D"0"/>
   <m:rMargin m:val=3D"0"/>
   <m:defJc m:val=3D"centerGroup"/>
   <m:wrapIndent m:val=3D"1440"/>
   <m:intLim m:val=3D"subSup"/>
   <m:naryLim m:val=3D"undOvr"/>
  </m:mathPr></w:WordDocument>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:LatentStyles DefLockedState=3D"false" DefUnhideWhenUsed=3D"false"
  DefSemiHidden=3D"false" DefQFormat=3D"false" LatentStyleCount=3D"371">
  <w:LsdException Locked=3D"false" QFormat=3D"true" Name=3D"Normal"/>
  <w:LsdException Locked=3D"false" QFormat=3D"true" Name=3D"heading 1"/>
  <w:LsdException Locked=3D"false" SemiHidden=3D"true" UnhideWhenUsed=3D"tr=
ue"
   QFormat=3D"true" Name=3D"heading 2"/>
  <w:LsdException Locked=3D"false" SemiHidden=3D"true" UnhideWhenUsed=3D"tr=
ue"
   QFormat=3D"true" Name=3D"heading 3"/>
  <w:LsdException Locked=3D"false" SemiHidden=3D"true" UnhideWhenUsed=3D"tr=
ue"
   QFormat=3D"true" Name=3D"heading 4"/>
  <w:LsdException Locked=3D"false" SemiHidden=3D"true" UnhideWhenUsed=3D"tr=
ue"
   QFormat=3D"true" Name=3D"heading 5"/>
  <w:LsdException Locked=3D"false" SemiHidden=3D"true" UnhideWhenUsed=3D"tr=
ue"
   QFormat=3D"true" Name=3D"heading 6"/>
  <w:LsdException Locked=3D"false" SemiHidden=3D"true" UnhideWhenUsed=3D"tr=
ue"
   QFormat=3D"true" Name=3D"heading 7"/>
  <w:LsdException Locked=3D"false" SemiHidden=3D"true" UnhideWhenUsed=3D"tr=
ue"
   QFormat=3D"true" Name=3D"heading 8"/>
  <w:LsdException Locked=3D"false" SemiHidden=3D"true" UnhideWhenUsed=3D"tr=
ue"
   QFormat=3D"true" Name=3D"heading 9"/>
  <w:LsdException Locked=3D"false" SemiHidden=3D"true" UnhideWhenUsed=3D"tr=
ue"
   QFormat=3D"true" Name=3D"caption"/>
  <w:LsdException Locked=3D"false" QFormat=3D"true" Name=3D"Title"/>
  <w:LsdException Locked=3D"false" Priority=3D"1" SemiHidden=3D"true"
   Name=3D"Default Paragraph Font"/>
  <w:LsdException Locked=3D"false" QFormat=3D"true" Name=3D"Subtitle"/>
  <w:LsdException Locked=3D"false" QFormat=3D"true" Name=3D"Strong"/>
  <w:LsdException Locked=3D"false" QFormat=3D"true" Name=3D"Emphasis"/>
  <w:LsdException Locked=3D"false" Priority=3D"99" SemiHidden=3D"true"
   UnhideWhenUsed=3D"true" Name=3D"HTML Top of Form"/>
  <w:LsdException Locked=3D"false" Priority=3D"99" SemiHidden=3D"true"
   UnhideWhenUsed=3D"true" Name=3D"HTML Bottom of Form"/>
  <w:LsdException Locked=3D"false" SemiHidden=3D"true" UnhideWhenUsed=3D"tr=
ue"
   Name=3D"Normal Table"/>
  <w:LsdException Locked=3D"false" Priority=3D"99" SemiHidden=3D"true"
   UnhideWhenUsed=3D"true" Name=3D"No List"/>
  <w:LsdException Locked=3D"false" Priority=3D"99" SemiHidden=3D"true"
   UnhideWhenUsed=3D"true" Name=3D"Outline List 1"/>
  <w:LsdException Locked=3D"false" Priority=3D"99" SemiHidden=3D"true"
   UnhideWhenUsed=3D"true" Name=3D"Outline List 2"/>
  <w:LsdException Locked=3D"false" Priority=3D"99" SemiHidden=3D"true"
   UnhideWhenUsed=3D"true" Name=3D"Outline List 3"/>
  <w:LsdException Locked=3D"false" SemiHidden=3D"true" UnhideWhenUsed=3D"tr=
ue"
   Name=3D"Table Simple 1"/>
  <w:LsdException Locked=3D"false" SemiHidden=3D"true" UnhideWhenUsed=3D"tr=
ue"
   Name=3D"Table Simple 2"/>
  <w:LsdException Locked=3D"false" SemiHidden=3D"true" UnhideWhenUsed=3D"tr=
ue"
   Name=3D"Table Simple 3"/>
  <w:LsdException Locked=3D"false" SemiHidden=3D"true" UnhideWhenUsed=3D"tr=
ue"
   Name=3D"Table Classic 1"/>
  <w:LsdException Locked=3D"false" SemiHidden=3D"true" UnhideWhenUsed=3D"tr=
ue"
   Name=3D"Table Classic 2"/>
  <w:LsdException Locked=3D"false" SemiHidden=3D"true" UnhideWhenUsed=3D"tr=
ue"
   Name=3D"Table Classic 3"/>
  <w:LsdException Locked=3D"false" SemiHidden=3D"true" UnhideWhenUsed=3D"tr=
ue"
   Name=3D"Table Classic 4"/>
  <w:LsdException Locked=3D"false" SemiHidden=3D"true" UnhideWhenUsed=3D"tr=
ue"
   Name=3D"Table Colorful 1"/>
  <w:LsdException Locked=3D"false" SemiHidden=3D"true" UnhideWhenUsed=3D"tr=
ue"
   Name=3D"Table Colorful 2"/>
  <w:LsdException Locked=3D"false" SemiHidden=3D"true" UnhideWhenUsed=3D"tr=
ue"
   Name=3D"Table Colorful 3"/>
  <w:LsdException Locked=3D"false" SemiHidden=3D"true" UnhideWhenUsed=3D"tr=
ue"
   Name=3D"Table Columns 1"/>
  <w:LsdException Locked=3D"false" SemiHidden=3D"true" UnhideWhenUsed=3D"tr=
ue"
   Name=3D"Table Columns 2"/>
  <w:LsdException Locked=3D"false" SemiHidden=3D"true" UnhideWhenUsed=3D"tr=
ue"
   Name=3D"Table Columns 3"/>
  <w:LsdException Locked=3D"false" SemiHidden=3D"true" UnhideWhenUsed=3D"tr=
ue"
   Name=3D"Table Columns 4"/>
  <w:LsdException Locked=3D"false" SemiHidden=3D"true" UnhideWhenUsed=3D"tr=
ue"
   Name=3D"Table Columns 5"/>
  <w:LsdException Locked=3D"false" SemiHidden=3D"true" UnhideWhenUsed=3D"tr=
ue"
   Name=3D"Table Grid 1"/>
  <w:LsdException Locked=3D"false" SemiHidden=3D"true" UnhideWhenUsed=3D"tr=
ue"
   Name=3D"Table Grid 2"/>
  <w:LsdException Locked=3D"false" SemiHidden=3D"true" UnhideWhenUsed=3D"tr=
ue"
   Name=3D"Table Grid 3"/>
  <w:LsdException Locked=3D"false" SemiHidden=3D"true" UnhideWhenUsed=3D"tr=
ue"
   Name=3D"Table Grid 4"/>
  <w:LsdException Locked=3D"false" SemiHidden=3D"true" UnhideWhenUsed=3D"tr=
ue"
   Name=3D"Table Grid 5"/>
  <w:LsdException Locked=3D"false" SemiHidden=3D"true" UnhideWhenUsed=3D"tr=
ue"
   Name=3D"Table Grid 6"/>
  <w:LsdException Locked=3D"false" SemiHidden=3D"true" UnhideWhenUsed=3D"tr=
ue"
   Name=3D"Table Grid 7"/>
  <w:LsdException Locked=3D"false" SemiHidden=3D"true" UnhideWhenUsed=3D"tr=
ue"
   Name=3D"Table Grid 8"/>
  <w:LsdException Locked=3D"false" SemiHidden=3D"true" UnhideWhenUsed=3D"tr=
ue"
   Name=3D"Table List 1"/>
  <w:LsdException Locked=3D"false" SemiHidden=3D"true" UnhideWhenUsed=3D"tr=
ue"
   Name=3D"Table List 2"/>
  <w:LsdException Locked=3D"false" SemiHidden=3D"true" UnhideWhenUsed=3D"tr=
ue"
   Name=3D"Table List 3"/>
  <w:LsdException Locked=3D"false" SemiHidden=3D"true" UnhideWhenUsed=3D"tr=
ue"
   Name=3D"Table List 4"/>
  <w:LsdException Locked=3D"false" SemiHidden=3D"true" UnhideWhenUsed=3D"tr=
ue"
   Name=3D"Table List 5"/>
  <w:LsdException Locked=3D"false" SemiHidden=3D"true" UnhideWhenUsed=3D"tr=
ue"
   Name=3D"Table List 6"/>
  <w:LsdException Locked=3D"false" SemiHidden=3D"true" UnhideWhenUsed=3D"tr=
ue"
   Name=3D"Table List 7"/>
  <w:LsdException Locked=3D"false" SemiHidden=3D"true" UnhideWhenUsed=3D"tr=
ue"
   Name=3D"Table List 8"/>
  <w:LsdException Locked=3D"false" SemiHidden=3D"true" UnhideWhenUsed=3D"tr=
ue"
   Name=3D"Table 3D effects 1"/>
  <w:LsdException Locked=3D"false" SemiHidden=3D"true" UnhideWhenUsed=3D"tr=
ue"
   Name=3D"Table 3D effects 2"/>
  <w:LsdException Locked=3D"false" SemiHidden=3D"true" UnhideWhenUsed=3D"tr=
ue"
   Name=3D"Table 3D effects 3"/>
  <w:LsdException Locked=3D"false" SemiHidden=3D"true" UnhideWhenUsed=3D"tr=
ue"
   Name=3D"Table Contemporary"/>
  <w:LsdException Locked=3D"false" SemiHidden=3D"true" UnhideWhenUsed=3D"tr=
ue"
   Name=3D"Table Elegant"/>
  <w:LsdException Locked=3D"false" SemiHidden=3D"true" UnhideWhenUsed=3D"tr=
ue"
   Name=3D"Table Professional"/>
  <w:LsdException Locked=3D"false" SemiHidden=3D"true" UnhideWhenUsed=3D"tr=
ue"
   Name=3D"Table Subtle 1"/>
  <w:LsdException Locked=3D"false" SemiHidden=3D"true" UnhideWhenUsed=3D"tr=
ue"
   Name=3D"Table Subtle 2"/>
  <w:LsdException Locked=3D"false" SemiHidden=3D"true" UnhideWhenUsed=3D"tr=
ue"
   Name=3D"Table Web 1"/>
  <w:LsdException Locked=3D"false" SemiHidden=3D"true" UnhideWhenUsed=3D"tr=
ue"
   Name=3D"Table Web 2"/>
  <w:LsdException Locked=3D"false" SemiHidden=3D"true" UnhideWhenUsed=3D"tr=
ue"
   Name=3D"Table Web 3"/>
  <w:LsdException Locked=3D"false" SemiHidden=3D"true" UnhideWhenUsed=3D"tr=
ue"
   Name=3D"Table Grid"/>
  <w:LsdException Locked=3D"false" SemiHidden=3D"true" UnhideWhenUsed=3D"tr=
ue"
   Name=3D"Table Theme"/>
  <w:LsdException Locked=3D"false" Priority=3D"99" SemiHidden=3D"true"
   Name=3D"Placeholder Text"/>
  <w:LsdException Locked=3D"false" Priority=3D"99" Name=3D"No Spacing"/>
  <w:LsdException Locked=3D"false" Priority=3D"60" Name=3D"Light Shading"/>
  <w:LsdException Locked=3D"false" Priority=3D"61" Name=3D"Light List"/>
  <w:LsdException Locked=3D"false" Priority=3D"62" Name=3D"Light Grid"/>
  <w:LsdException Locked=3D"false" Priority=3D"63" Name=3D"Medium Shading 1=
"/>
  <w:LsdException Locked=3D"false" Priority=3D"64" Name=3D"Medium Shading 2=
"/>
  <w:LsdException Locked=3D"false" Priority=3D"65" Name=3D"Medium List 1"/>
  <w:LsdException Locked=3D"false" Priority=3D"66" Name=3D"Medium List 2"/>
  <w:LsdException Locked=3D"false" Priority=3D"67" Name=3D"Medium Grid 1"/>
  <w:LsdException Locked=3D"false" Priority=3D"68" Name=3D"Medium Grid 2"/>
  <w:LsdException Locked=3D"false" Priority=3D"69" Name=3D"Medium Grid 3"/>
  <w:LsdException Locked=3D"false" Priority=3D"70" Name=3D"Dark List"/>
  <w:LsdException Locked=3D"false" Priority=3D"71" Name=3D"Colorful Shading=
"/>
  <w:LsdException Locked=3D"false" Priority=3D"72" Name=3D"Colorful List"/>
  <w:LsdException Locked=3D"false" Priority=3D"73" Name=3D"Colorful Grid"/>
  <w:LsdException Locked=3D"false" Priority=3D"60" Name=3D"Light Shading Ac=
cent 1"/>
  <w:LsdException Locked=3D"false" Priority=3D"61" Name=3D"Light List Accen=
t 1"/>
  <w:LsdException Locked=3D"false" Priority=3D"62" Name=3D"Light Grid Accen=
t 1"/>
  <w:LsdException Locked=3D"false" Priority=3D"63" Name=3D"Medium Shading 1=
 Accent 1"/>
  <w:LsdException Locked=3D"false" Priority=3D"64" Name=3D"Medium Shading 2=
 Accent 1"/>
  <w:LsdException Locked=3D"false" Priority=3D"65" Name=3D"Medium List 1 Ac=
cent 1"/>
  <w:LsdException Locked=3D"false" Priority=3D"99" SemiHidden=3D"true" Name=
=3D"Revision"/>
  <w:LsdException Locked=3D"false" Priority=3D"99" Name=3D"List Paragraph"/>
  <w:LsdException Locked=3D"false" Priority=3D"99" Name=3D"Quote"/>
  <w:LsdException Locked=3D"false" Priority=3D"99" Name=3D"Intense Quote"/>
  <w:LsdException Locked=3D"false" Priority=3D"66" Name=3D"Medium List 2 Ac=
cent 1"/>
  <w:LsdException Locked=3D"false" Priority=3D"67" Name=3D"Medium Grid 1 Ac=
cent 1"/>
  <w:LsdException Locked=3D"false" Priority=3D"68" Name=3D"Medium Grid 2 Ac=
cent 1"/>
  <w:LsdException Locked=3D"false" Priority=3D"69" Name=3D"Medium Grid 3 Ac=
cent 1"/>
  <w:LsdException Locked=3D"false" Priority=3D"70" Name=3D"Dark List Accent=
 1"/>
  <w:LsdException Locked=3D"false" Priority=3D"71" Name=3D"Colorful Shading=
 Accent 1"/>
  <w:LsdException Locked=3D"false" Priority=3D"72" Name=3D"Colorful List Ac=
cent 1"/>
  <w:LsdException Locked=3D"false" Priority=3D"73" Name=3D"Colorful Grid Ac=
cent 1"/>
  <w:LsdException Locked=3D"false" Priority=3D"60" Name=3D"Light Shading Ac=
cent 2"/>
  <w:LsdException Locked=3D"false" Priority=3D"61" Name=3D"Light List Accen=
t 2"/>
  <w:LsdException Locked=3D"false" Priority=3D"62" Name=3D"Light Grid Accen=
t 2"/>
  <w:LsdException Locked=3D"false" Priority=3D"63" Name=3D"Medium Shading 1=
 Accent 2"/>
  <w:LsdException Locked=3D"false" Priority=3D"64" Name=3D"Medium Shading 2=
 Accent 2"/>
  <w:LsdException Locked=3D"false" Priority=3D"65" Name=3D"Medium List 1 Ac=
cent 2"/>
  <w:LsdException Locked=3D"false" Priority=3D"66" Name=3D"Medium List 2 Ac=
cent 2"/>
  <w:LsdException Locked=3D"false" Priority=3D"67" Name=3D"Medium Grid 1 Ac=
cent 2"/>
  <w:LsdException Locked=3D"false" Priority=3D"68" Name=3D"Medium Grid 2 Ac=
cent 2"/>
  <w:LsdException Locked=3D"false" Priority=3D"69" Name=3D"Medium Grid 3 Ac=
cent 2"/>
  <w:LsdException Locked=3D"false" Priority=3D"70" Name=3D"Dark List Accent=
 2"/>
  <w:LsdException Locked=3D"false" Priority=3D"71" Name=3D"Colorful Shading=
 Accent 2"/>
  <w:LsdException Locked=3D"false" Priority=3D"72" Name=3D"Colorful List Ac=
cent 2"/>
  <w:LsdException Locked=3D"false" Priority=3D"73" Name=3D"Colorful Grid Ac=
cent 2"/>
  <w:LsdException Locked=3D"false" Priority=3D"60" Name=3D"Light Shading Ac=
cent 3"/>
  <w:LsdException Locked=3D"false" Priority=3D"61" Name=3D"Light List Accen=
t 3"/>
  <w:LsdException Locked=3D"false" Priority=3D"62" Name=3D"Light Grid Accen=
t 3"/>
  <w:LsdException Locked=3D"false" Priority=3D"63" Name=3D"Medium Shading 1=
 Accent 3"/>
  <w:LsdException Locked=3D"false" Priority=3D"64" Name=3D"Medium Shading 2=
 Accent 3"/>
  <w:LsdException Locked=3D"false" Priority=3D"65" Name=3D"Medium List 1 Ac=
cent 3"/>
  <w:LsdException Locked=3D"false" Priority=3D"66" Name=3D"Medium List 2 Ac=
cent 3"/>
  <w:LsdException Locked=3D"false" Priority=3D"67" Name=3D"Medium Grid 1 Ac=
cent 3"/>
  <w:LsdException Locked=3D"false" Priority=3D"68" Name=3D"Medium Grid 2 Ac=
cent 3"/>
  <w:LsdException Locked=3D"false" Priority=3D"69" Name=3D"Medium Grid 3 Ac=
cent 3"/>
  <w:LsdException Locked=3D"false" Priority=3D"70" Name=3D"Dark List Accent=
 3"/>
  <w:LsdException Locked=3D"false" Priority=3D"71" Name=3D"Colorful Shading=
 Accent 3"/>
  <w:LsdException Locked=3D"false" Priority=3D"72" Name=3D"Colorful List Ac=
cent 3"/>
  <w:LsdException Locked=3D"false" Priority=3D"73" Name=3D"Colorful Grid Ac=
cent 3"/>
  <w:LsdException Locked=3D"false" Priority=3D"60" Name=3D"Light Shading Ac=
cent 4"/>
  <w:LsdException Locked=3D"false" Priority=3D"61" Name=3D"Light List Accen=
t 4"/>
  <w:LsdException Locked=3D"false" Priority=3D"62" Name=3D"Light Grid Accen=
t 4"/>
  <w:LsdException Locked=3D"false" Priority=3D"63" Name=3D"Medium Shading 1=
 Accent 4"/>
  <w:LsdException Locked=3D"false" Priority=3D"64" Name=3D"Medium Shading 2=
 Accent 4"/>
  <w:LsdException Locked=3D"false" Priority=3D"65" Name=3D"Medium List 1 Ac=
cent 4"/>
  <w:LsdException Locked=3D"false" Priority=3D"66" Name=3D"Medium List 2 Ac=
cent 4"/>
  <w:LsdException Locked=3D"false" Priority=3D"67" Name=3D"Medium Grid 1 Ac=
cent 4"/>
  <w:LsdException Locked=3D"false" Priority=3D"68" Name=3D"Medium Grid 2 Ac=
cent 4"/>
  <w:LsdException Locked=3D"false" Priority=3D"69" Name=3D"Medium Grid 3 Ac=
cent 4"/>
  <w:LsdException Locked=3D"false" Priority=3D"70" Name=3D"Dark List Accent=
 4"/>
  <w:LsdException Locked=3D"false" Priority=3D"71" Name=3D"Colorful Shading=
 Accent 4"/>
  <w:LsdException Locked=3D"false" Priority=3D"72" Name=3D"Colorful List Ac=
cent 4"/>
  <w:LsdException Locked=3D"false" Priority=3D"73" Name=3D"Colorful Grid Ac=
cent 4"/>
  <w:LsdException Locked=3D"false" Priority=3D"60" Name=3D"Light Shading Ac=
cent 5"/>
  <w:LsdException Locked=3D"false" Priority=3D"61" Name=3D"Light List Accen=
t 5"/>
  <w:LsdException Locked=3D"false" Priority=3D"62" Name=3D"Light Grid Accen=
t 5"/>
  <w:LsdException Locked=3D"false" Priority=3D"63" Name=3D"Medium Shading 1=
 Accent 5"/>
  <w:LsdException Locked=3D"false" Priority=3D"64" Name=3D"Medium Shading 2=
 Accent 5"/>
  <w:LsdException Locked=3D"false" Priority=3D"65" Name=3D"Medium List 1 Ac=
cent 5"/>
  <w:LsdException Locked=3D"false" Priority=3D"66" Name=3D"Medium List 2 Ac=
cent 5"/>
  <w:LsdException Locked=3D"false" Priority=3D"67" Name=3D"Medium Grid 1 Ac=
cent 5"/>
  <w:LsdException Locked=3D"false" Priority=3D"68" Name=3D"Medium Grid 2 Ac=
cent 5"/>
  <w:LsdException Locked=3D"false" Priority=3D"69" Name=3D"Medium Grid 3 Ac=
cent 5"/>
  <w:LsdException Locked=3D"false" Priority=3D"70" Name=3D"Dark List Accent=
 5"/>
  <w:LsdException Locked=3D"false" Priority=3D"71" Name=3D"Colorful Shading=
 Accent 5"/>
  <w:LsdException Locked=3D"false" Priority=3D"72" Name=3D"Colorful List Ac=
cent 5"/>
  <w:LsdException Locked=3D"false" Priority=3D"73" Name=3D"Colorful Grid Ac=
cent 5"/>
  <w:LsdException Locked=3D"false" Priority=3D"60" Name=3D"Light Shading Ac=
cent 6"/>
  <w:LsdException Locked=3D"false" Priority=3D"61" Name=3D"Light List Accen=
t 6"/>
  <w:LsdException Locked=3D"false" Priority=3D"62" Name=3D"Light Grid Accen=
t 6"/>
  <w:LsdException Locked=3D"false" Priority=3D"63" Name=3D"Medium Shading 1=
 Accent 6"/>
  <w:LsdException Locked=3D"false" Priority=3D"64" Name=3D"Medium Shading 2=
 Accent 6"/>
  <w:LsdException Locked=3D"false" Priority=3D"65" Name=3D"Medium List 1 Ac=
cent 6"/>
  <w:LsdException Locked=3D"false" Priority=3D"66" Name=3D"Medium List 2 Ac=
cent 6"/>
  <w:LsdException Locked=3D"false" Priority=3D"67" Name=3D"Medium Grid 1 Ac=
cent 6"/>
  <w:LsdException Locked=3D"false" Priority=3D"68" Name=3D"Medium Grid 2 Ac=
cent 6"/>
  <w:LsdException Locked=3D"false" Priority=3D"69" Name=3D"Medium Grid 3 Ac=
cent 6"/>
  <w:LsdException Locked=3D"false" Priority=3D"70" Name=3D"Dark List Accent=
 6"/>
  <w:LsdException Locked=3D"false" Priority=3D"71" Name=3D"Colorful Shading=
 Accent 6"/>
  <w:LsdException Locked=3D"false" Priority=3D"72" Name=3D"Colorful List Ac=
cent 6"/>
  <w:LsdException Locked=3D"false" Priority=3D"73" Name=3D"Colorful Grid Ac=
cent 6"/>
  <w:LsdException Locked=3D"false" Priority=3D"19" QFormat=3D"true"
   Name=3D"Subtle Emphasis"/>
  <w:LsdException Locked=3D"false" Priority=3D"21" QFormat=3D"true"
   Name=3D"Intense Emphasis"/>
  <w:LsdException Locked=3D"false" Priority=3D"31" QFormat=3D"true"
   Name=3D"Subtle Reference"/>
  <w:LsdException Locked=3D"false" Priority=3D"32" QFormat=3D"true"
   Name=3D"Intense Reference"/>
  <w:LsdException Locked=3D"false" Priority=3D"33" QFormat=3D"true" Name=3D=
"Book Title"/>
  <w:LsdException Locked=3D"false" Priority=3D"37" SemiHidden=3D"true"
   UnhideWhenUsed=3D"true" Name=3D"Bibliography"/>
  <w:LsdException Locked=3D"false" Priority=3D"39" SemiHidden=3D"true"
   UnhideWhenUsed=3D"true" QFormat=3D"true" Name=3D"TOC Heading"/>
  <w:LsdException Locked=3D"false" Priority=3D"41" Name=3D"Plain Table 1"/>
  <w:LsdException Locked=3D"false" Priority=3D"42" Name=3D"Plain Table 2"/>
  <w:LsdException Locked=3D"false" Priority=3D"43" Name=3D"Plain Table 3"/>
  <w:LsdException Locked=3D"false" Priority=3D"44" Name=3D"Plain Table 4"/>
  <w:LsdException Locked=3D"false" Priority=3D"45" Name=3D"Plain Table 5"/>
  <w:LsdException Locked=3D"false" Priority=3D"40" Name=3D"Grid Table Light=
"/>
  <w:LsdException Locked=3D"false" Priority=3D"46" Name=3D"Grid Table 1 Lig=
ht"/>
  <w:LsdException Locked=3D"false" Priority=3D"47" Name=3D"Grid Table 2"/>
  <w:LsdException Locked=3D"false" Priority=3D"48" Name=3D"Grid Table 3"/>
  <w:LsdException Locked=3D"false" Priority=3D"49" Name=3D"Grid Table 4"/>
  <w:LsdException Locked=3D"false" Priority=3D"50" Name=3D"Grid Table 5 Dar=
k"/>
  <w:LsdException Locked=3D"false" Priority=3D"51" Name=3D"Grid Table 6 Col=
orful"/>
  <w:LsdException Locked=3D"false" Priority=3D"52" Name=3D"Grid Table 7 Col=
orful"/>
  <w:LsdException Locked=3D"false" Priority=3D"46"
   Name=3D"Grid Table 1 Light Accent 1"/>
  <w:LsdException Locked=3D"false" Priority=3D"47" Name=3D"Grid Table 2 Acc=
ent 1"/>
  <w:LsdException Locked=3D"false" Priority=3D"48" Name=3D"Grid Table 3 Acc=
ent 1"/>
  <w:LsdException Locked=3D"false" Priority=3D"49" Name=3D"Grid Table 4 Acc=
ent 1"/>
  <w:LsdException Locked=3D"false" Priority=3D"50" Name=3D"Grid Table 5 Dar=
k Accent 1"/>
  <w:LsdException Locked=3D"false" Priority=3D"51"
   Name=3D"Grid Table 6 Colorful Accent 1"/>
  <w:LsdException Locked=3D"false" Priority=3D"52"
   Name=3D"Grid Table 7 Colorful Accent 1"/>
  <w:LsdException Locked=3D"false" Priority=3D"46"
   Name=3D"Grid Table 1 Light Accent 2"/>
  <w:LsdException Locked=3D"false" Priority=3D"47" Name=3D"Grid Table 2 Acc=
ent 2"/>
  <w:LsdException Locked=3D"false" Priority=3D"48" Name=3D"Grid Table 3 Acc=
ent 2"/>
  <w:LsdException Locked=3D"false" Priority=3D"49" Name=3D"Grid Table 4 Acc=
ent 2"/>
  <w:LsdException Locked=3D"false" Priority=3D"50" Name=3D"Grid Table 5 Dar=
k Accent 2"/>
  <w:LsdException Locked=3D"false" Priority=3D"51"
   Name=3D"Grid Table 6 Colorful Accent 2"/>
  <w:LsdException Locked=3D"false" Priority=3D"52"
   Name=3D"Grid Table 7 Colorful Accent 2"/>
  <w:LsdException Locked=3D"false" Priority=3D"46"
   Name=3D"Grid Table 1 Light Accent 3"/>
  <w:LsdException Locked=3D"false" Priority=3D"47" Name=3D"Grid Table 2 Acc=
ent 3"/>
  <w:LsdException Locked=3D"false" Priority=3D"48" Name=3D"Grid Table 3 Acc=
ent 3"/>
  <w:LsdException Locked=3D"false" Priority=3D"49" Name=3D"Grid Table 4 Acc=
ent 3"/>
  <w:LsdException Locked=3D"false" Priority=3D"50" Name=3D"Grid Table 5 Dar=
k Accent 3"/>
  <w:LsdException Locked=3D"false" Priority=3D"51"
   Name=3D"Grid Table 6 Colorful Accent 3"/>
  <w:LsdException Locked=3D"false" Priority=3D"52"
   Name=3D"Grid Table 7 Colorful Accent 3"/>
  <w:LsdException Locked=3D"false" Priority=3D"46"
   Name=3D"Grid Table 1 Light Accent 4"/>
  <w:LsdException Locked=3D"false" Priority=3D"47" Name=3D"Grid Table 2 Acc=
ent 4"/>
  <w:LsdException Locked=3D"false" Priority=3D"48" Name=3D"Grid Table 3 Acc=
ent 4"/>
  <w:LsdException Locked=3D"false" Priority=3D"49" Name=3D"Grid Table 4 Acc=
ent 4"/>
  <w:LsdException Locked=3D"false" Priority=3D"50" Name=3D"Grid Table 5 Dar=
k Accent 4"/>
  <w:LsdException Locked=3D"false" Priority=3D"51"
   Name=3D"Grid Table 6 Colorful Accent 4"/>
  <w:LsdException Locked=3D"false" Priority=3D"52"
   Name=3D"Grid Table 7 Colorful Accent 4"/>
  <w:LsdException Locked=3D"false" Priority=3D"46"
   Name=3D"Grid Table 1 Light Accent 5"/>
  <w:LsdException Locked=3D"false" Priority=3D"47" Name=3D"Grid Table 2 Acc=
ent 5"/>
  <w:LsdException Locked=3D"false" Priority=3D"48" Name=3D"Grid Table 3 Acc=
ent 5"/>
  <w:LsdException Locked=3D"false" Priority=3D"49" Name=3D"Grid Table 4 Acc=
ent 5"/>
  <w:LsdException Locked=3D"false" Priority=3D"50" Name=3D"Grid Table 5 Dar=
k Accent 5"/>
  <w:LsdException Locked=3D"false" Priority=3D"51"
   Name=3D"Grid Table 6 Colorful Accent 5"/>
  <w:LsdException Locked=3D"false" Priority=3D"52"
   Name=3D"Grid Table 7 Colorful Accent 5"/>
  <w:LsdException Locked=3D"false" Priority=3D"46"
   Name=3D"Grid Table 1 Light Accent 6"/>
  <w:LsdException Locked=3D"false" Priority=3D"47" Name=3D"Grid Table 2 Acc=
ent 6"/>
  <w:LsdException Locked=3D"false" Priority=3D"48" Name=3D"Grid Table 3 Acc=
ent 6"/>
  <w:LsdException Locked=3D"false" Priority=3D"49" Name=3D"Grid Table 4 Acc=
ent 6"/>
  <w:LsdException Locked=3D"false" Priority=3D"50" Name=3D"Grid Table 5 Dar=
k Accent 6"/>
  <w:LsdException Locked=3D"false" Priority=3D"51"
   Name=3D"Grid Table 6 Colorful Accent 6"/>
  <w:LsdException Locked=3D"false" Priority=3D"52"
   Name=3D"Grid Table 7 Colorful Accent 6"/>
  <w:LsdException Locked=3D"false" Priority=3D"46" Name=3D"List Table 1 Lig=
ht"/>
  <w:LsdException Locked=3D"false" Priority=3D"47" Name=3D"List Table 2"/>
  <w:LsdException Locked=3D"false" Priority=3D"48" Name=3D"List Table 3"/>
  <w:LsdException Locked=3D"false" Priority=3D"49" Name=3D"List Table 4"/>
  <w:LsdException Locked=3D"false" Priority=3D"50" Name=3D"List Table 5 Dar=
k"/>
  <w:LsdException Locked=3D"false" Priority=3D"51" Name=3D"List Table 6 Col=
orful"/>
  <w:LsdException Locked=3D"false" Priority=3D"52" Name=3D"List Table 7 Col=
orful"/>
  <w:LsdException Locked=3D"false" Priority=3D"46"
   Name=3D"List Table 1 Light Accent 1"/>
  <w:LsdException Locked=3D"false" Priority=3D"47" Name=3D"List Table 2 Acc=
ent 1"/>
  <w:LsdException Locked=3D"false" Priority=3D"48" Name=3D"List Table 3 Acc=
ent 1"/>
  <w:LsdException Locked=3D"false" Priority=3D"49" Name=3D"List Table 4 Acc=
ent 1"/>
  <w:LsdException Locked=3D"false" Priority=3D"50" Name=3D"List Table 5 Dar=
k Accent 1"/>
  <w:LsdException Locked=3D"false" Priority=3D"51"
   Name=3D"List Table 6 Colorful Accent 1"/>
  <w:LsdException Locked=3D"false" Priority=3D"52"
   Name=3D"List Table 7 Colorful Accent 1"/>
  <w:LsdException Locked=3D"false" Priority=3D"46"
   Name=3D"List Table 1 Light Accent 2"/>
  <w:LsdException Locked=3D"false" Priority=3D"47" Name=3D"List Table 2 Acc=
ent 2"/>
  <w:LsdException Locked=3D"false" Priority=3D"48" Name=3D"List Table 3 Acc=
ent 2"/>
  <w:LsdException Locked=3D"false" Priority=3D"49" Name=3D"List Table 4 Acc=
ent 2"/>
  <w:LsdException Locked=3D"false" Priority=3D"50" Name=3D"List Table 5 Dar=
k Accent 2"/>
  <w:LsdException Locked=3D"false" Priority=3D"51"
   Name=3D"List Table 6 Colorful Accent 2"/>
  <w:LsdException Locked=3D"false" Priority=3D"52"
   Name=3D"List Table 7 Colorful Accent 2"/>
  <w:LsdException Locked=3D"false" Priority=3D"46"
   Name=3D"List Table 1 Light Accent 3"/>
  <w:LsdException Locked=3D"false" Priority=3D"47" Name=3D"List Table 2 Acc=
ent 3"/>
  <w:LsdException Locked=3D"false" Priority=3D"48" Name=3D"List Table 3 Acc=
ent 3"/>
  <w:LsdException Locked=3D"false" Priority=3D"49" Name=3D"List Table 4 Acc=
ent 3"/>
  <w:LsdException Locked=3D"false" Priority=3D"50" Name=3D"List Table 5 Dar=
k Accent 3"/>
  <w:LsdException Locked=3D"false" Priority=3D"51"
   Name=3D"List Table 6 Colorful Accent 3"/>
  <w:LsdException Locked=3D"false" Priority=3D"52"
   Name=3D"List Table 7 Colorful Accent 3"/>
  <w:LsdException Locked=3D"false" Priority=3D"46"
   Name=3D"List Table 1 Light Accent 4"/>
  <w:LsdException Locked=3D"false" Priority=3D"47" Name=3D"List Table 2 Acc=
ent 4"/>
  <w:LsdException Locked=3D"false" Priority=3D"48" Name=3D"List Table 3 Acc=
ent 4"/>
  <w:LsdException Locked=3D"false" Priority=3D"49" Name=3D"List Table 4 Acc=
ent 4"/>
  <w:LsdException Locked=3D"false" Priority=3D"50" Name=3D"List Table 5 Dar=
k Accent 4"/>
  <w:LsdException Locked=3D"false" Priority=3D"51"
   Name=3D"List Table 6 Colorful Accent 4"/>
  <w:LsdException Locked=3D"false" Priority=3D"52"
   Name=3D"List Table 7 Colorful Accent 4"/>
  <w:LsdException Locked=3D"false" Priority=3D"46"
   Name=3D"List Table 1 Light Accent 5"/>
  <w:LsdException Locked=3D"false" Priority=3D"47" Name=3D"List Table 2 Acc=
ent 5"/>
  <w:LsdException Locked=3D"false" Priority=3D"48" Name=3D"List Table 3 Acc=
ent 5"/>
  <w:LsdException Locked=3D"false" Priority=3D"49" Name=3D"List Table 4 Acc=
ent 5"/>
  <w:LsdException Locked=3D"false" Priority=3D"50" Name=3D"List Table 5 Dar=
k Accent 5"/>
  <w:LsdException Locked=3D"false" Priority=3D"51"
   Name=3D"List Table 6 Colorful Accent 5"/>
  <w:LsdException Locked=3D"false" Priority=3D"52"
   Name=3D"List Table 7 Colorful Accent 5"/>
  <w:LsdException Locked=3D"false" Priority=3D"46"
   Name=3D"List Table 1 Light Accent 6"/>
  <w:LsdException Locked=3D"false" Priority=3D"47" Name=3D"List Table 2 Acc=
ent 6"/>
  <w:LsdException Locked=3D"false" Priority=3D"48" Name=3D"List Table 3 Acc=
ent 6"/>
  <w:LsdException Locked=3D"false" Priority=3D"49" Name=3D"List Table 4 Acc=
ent 6"/>
  <w:LsdException Locked=3D"false" Priority=3D"50" Name=3D"List Table 5 Dar=
k Accent 6"/>
  <w:LsdException Locked=3D"false" Priority=3D"51"
   Name=3D"List Table 6 Colorful Accent 6"/>
  <w:LsdException Locked=3D"false" Priority=3D"52"
   Name=3D"List Table 7 Colorful Accent 6"/>
 </w:LatentStyles>
</xml><![endif]-->
<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:SimSun;
	panose-1:2 1 6 0 3 1 1 1 1 1;
	mso-font-alt:\5B8B\4F53;
	mso-font-charset:134;
	mso-generic-font-family:auto;
	mso-font-format:other;
	mso-font-pitch:variable;
	mso-font-signature:1 135135232 16 0 262144 0;}
@font-face
	{font-family:"Cambria Math";
	panose-1:2 4 5 3 5 4 6 3 2 4;
	mso-font-charset:1;
	mso-generic-font-family:roman;
	mso-font-format:other;
	mso-font-pitch:variable;
	mso-font-signature:0 0 0 0 0 0;}
@font-face
	{font-family:Calibri;
	panose-1:2 15 5 2 2 2 4 3 2 4;
	mso-font-charset:0;
	mso-generic-font-family:swiss;
	mso-font-pitch:variable;
	mso-font-signature:-469750017 -1073732485 9 0 511 0;}
@font-face
	{font-family:\7B49\7EBF;
	mso-font-alt:"Microsoft YaHei";
	mso-font-charset:134;
	mso-generic-font-family:auto;
	mso-font-pitch:auto;
	mso-font-signature:0 0 0 0 0 0;}
@font-face
	{font-family:"\@\7B49\7EBF";
	mso-font-charset:134;
	mso-generic-font-family:auto;
	mso-font-pitch:auto;
	mso-font-signature:0 0 0 0 0 0;}
@font-face
	{font-family:"\@SimSun";
	panose-1:2 1 6 0 3 1 1 1 1 1;
	mso-font-charset:134;
	mso-generic-font-family:auto;
	mso-font-pitch:variable;
	mso-font-signature:515 680460288 22 0 262145 0;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-unhide:no;
	mso-style-qformat:yes;
	mso-style-parent:"";
	margin:0in;
	margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Calibri","sans-serif";
	mso-ascii-font-family:Calibri;
	mso-ascii-theme-font:minor-latin;
	mso-fareast-font-family:\7B49\7EBF;
	mso-fareast-theme-font:minor-fareast;
	mso-hansi-font-family:Calibri;
	mso-hansi-theme-font:minor-latin;
	mso-bidi-font-family:"Times New Roman";
	mso-bidi-theme-font:minor-bidi;
	mso-fareast-language:ZH-CN;}
.MsoChpDefault
	{mso-style-type:export-only;
	mso-default-props:yes;
	font-size:10.0pt;
	mso-ansi-font-size:10.0pt;
	mso-bidi-font-size:10.0pt;
	mso-fareast-font-family:SimSun;}
@page WordSection1
	{size:595.3pt 841.9pt;
	margin:1.0in 1.25in 1.0in 1.25in;
	mso-header-margin:.5in;
	mso-footer-margin:.5in;
	mso-paper-source:0;}
div.WordSection1
	{page:WordSection1;}
 /* List Definitions */
 @list l0
	{mso-list-id:-1961355791;
	mso-list-type:simple;
	mso-list-template-ids:-1961355791;}
@list l0:level1
	{mso-level-start-at:26;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:0in;
	text-indent:0in;
	tab-stops:15.6pt;}
@list l1
	{mso-list-id:-583304342;
	mso-list-type:simple;
	mso-list-template-ids:-583304342;}
@list l1:level1
	{mso-level-start-at:17;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:0in;
	text-indent:0in;
	tab-stops:15.6pt;}
@list l2
	{mso-list-id:-18591075;
	mso-list-type:simple;
	mso-list-template-ids:-18591075;}
@list l2:level1
	{mso-level-start-at:11;
	mso-level-suffix:space;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:0in;
	text-indent:0in;}
@list l3
	{mso-list-id:575052457;
	mso-list-type:simple;
	mso-list-template-ids:575052457;}
@list l3:level1
	{mso-level-start-at:2;
	mso-level-suffix:space;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:0in;
	text-indent:0in;}
@list l4
	{mso-list-id:879632406;
	mso-list-type:simple;
	mso-list-template-ids:879632406;}
@list l4:level1
	{mso-level-start-at:21;
	mso-level-tab-stop:none;
	mso-level-number-position:left;
	margin-left:0in;
	text-indent:0in;
	tab-stops:15.6pt;}
ol
	{margin-bottom:0in;}
ul
	{margin-bottom:0in;}
-->
</style>
<!--[if gte mso 10]>
<style>
 /* Style Definitions */
 table.MsoNormalTable
	{mso-style-name:"Table Normal";
	mso-tstyle-rowband-size:0;
	mso-tstyle-colband-size:0;
	mso-style-noshow:yes;
	mso-style-priority:99;
	mso-style-parent:"";
	mso-padding-alt:0in 5.4pt 0in 5.4pt;
	mso-para-margin:0in;
	mso-para-margin-bottom:.0001pt;
	mso-pagination:widow-orphan;
	font-size:10.0pt;
	font-family:"Times New Roman","serif";}
</style>
<![endif]--><!--[if gte mso 9]><xml>
 <o:shapedefaults v:ext=3D"edit" spidmax=3D"1026"/>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <o:shapelayout v:ext=3D"edit">
  <o:idmap v:ext=3D"edit" data=3D"1"/>
 </o:shapelayout></xml><![endif]-->
</head>

<body lang=3DEN-US style=3D'tab-interval:.5in'>

<div class=3DWordSection1>

<p class=3DMsoNormal align=3Dcenter style=3D'text-align:center'><b><span
style=3D'mso-ascii-font-family:Calibri;mso-hansi-font-family:Calibri;mso-bi=
di-font-family:
Calibri'>QUESTION BANK <o:p></o:p></span></b></p>

<p class=3DMsoNormal><b><span style=3D'mso-ascii-font-family:Calibri;mso-ha=
nsi-font-family:
Calibri;mso-bidi-font-family:Calibri'>1.</span></b><b><span style=3D'font-s=
ize:
12.0pt;mso-ascii-font-family:Calibri;mso-fareast-font-family:SimSun;mso-han=
si-font-family:
Calibri;mso-bidi-font-family:Calibri'>Write a Scilab program to sort 10 num=
bers
using:Bubble sort in increasing order.</span></b><b><span style=3D'mso-asci=
i-font-family:
Calibri;mso-hansi-font-family:Calibri;mso-bidi-font-family:Calibri'><o:p></=
o:p></span></b></p>

<p class=3DMsoNormal>// Bubble Sort in Scilab</p>

<p class=3DMsoNormal>// Define an array of 10 numbers</p>

<p class=3DMsoNormal>numbers =3D [34, 7, 23, 32, 5, 62, 32, 32, 23, 12];</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Number of elements in the array</p>

<p class=3DMsoNormal>n =3D length(numbers);</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Bubble Sort algorithm</p>

<p class=3DMsoNormal>for i =3D 1:n-1</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>for
j =3D 1:n-i</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n>if
numbers(j) &gt; numbers(j+1)</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;
</span>// Swap the elements</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;
</span>temp =3D numbers(j);</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;
</span>numbers(j) =3D numbers(j+1);</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;
</span>numbers(j+1) =3D temp;</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n>end</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>end</p>

<p class=3DMsoNormal>end</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Display the sorted array</p>

<p class=3DMsoNormal>disp(&quot;Sorted numbers in increasing order:&quot;);=
</p>

<p class=3DMsoNormal>disp(numbers);</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal style=3D'margin-left:0in;text-indent:0in;mso-list:l3 l=
evel1 lfo1'><![if !supportLists]><b><span
style=3D'mso-fareast-font-family:Calibri;mso-fareast-theme-font:minor-latin;
mso-bidi-font-family:Calibri;mso-bidi-theme-font:minor-latin'><span
style=3D'mso-list:Ignore'>2. </span></span></b><![endif]><b>Insertion sort =
in
increasing order. [10M]<o:p></o:p></b></p>

<p class=3DMsoNormal>// Insertion Sort in Scilab</p>

<p class=3DMsoNormal>// Define an array of 10 numbers</p>

<p class=3DMsoNormal>numbers =3D [34, 7, 23, 32, 5, 62, 32, 32, 23, 12];</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Number of elements in the array</p>

<p class=3DMsoNormal>n =3D length(numbers);</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Insertion Sort algorithm</p>

<p class=3DMsoNormal>for i =3D 2:n</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>key
=3D numbers(i);</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>j =3D
i - 1;</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span></p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>//
Shift elements of numbers[1..i-1] that are greater than key</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>while j &gt;=3D 1 &amp; numbers(j) &gt; key</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n>numbers(j+1)
=3D numbers(j);</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n>j =3D
j - 1;</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>end</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span></p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>//
Place the key at the correct position</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>numbers(j+1) =3D key;</p>

<p class=3DMsoNormal>end</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Display the sorted array</p>

<p class=3DMsoNormal>disp(&quot;Sorted numbers in increasing order:&quot;);=
</p>

<p class=3DMsoNormal>disp(numbers);</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal style=3D'margin-left:0in;text-indent:0in;mso-list:l3 l=
evel1 lfo1'><![if !supportLists]><b><span
style=3D'mso-fareast-font-family:Calibri;mso-fareast-theme-font:minor-latin;
mso-bidi-font-family:Calibri;mso-bidi-theme-font:minor-latin'><span
style=3D'mso-list:Ignore'>3. </span></span></b><![endif]><b>Merge sort in
increasing order. [10M]<o:p></o:p></b></p>

<p class=3DMsoNormal>// Merge Sort in Scilab (Simplified)</p>

<p class=3DMsoNormal>// Function to merge two sorted arrays</p>

<p class=3DMsoNormal>function result =3D merge(left, right)</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>result =3D [];</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>while ~isempty(left) &amp; ~isempty(right)</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n>if
left(1) &lt; right(1)</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;
</span>result =3D [result, left(1)];</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;
</span>left =3D left(2:$);</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n>else</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;
</span>result =3D [result, right(1)];</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;
</span>right =3D right(2:$);</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n>end</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>end</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>result =3D [result, left, right]; // Append remaining elements</p>

<p class=3DMsoNormal>endfunction</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Merge Sort function</p>

<p class=3DMsoNormal>function sorted =3D mergeSort(arr)</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>if
length(arr) &lt;=3D 1 then</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>sorted =3D arr;</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>return;</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>end</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>mid
=3D floor(length(arr) / 2);</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>left =3D arr(1:mid);</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>right =3D arr(mid+1:$);</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span></p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>left =3D mergeSort(left);</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>right =3D mergeSort(right);</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span></p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>sorted =3D merge(left, right);</p>

<p class=3DMsoNormal>endfunction</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Main Code</p>

<p class=3DMsoNormal>numbers =3D [34, 7, 23, 32, 5, 62, 32, 32, 23, 12]; //=
 10
numbers</p>

<p class=3DMsoNormal>sortedNumbers =3D mergeSort(numbers); // Sorting the n=
umbers
using merge sort</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>disp(&quot;Sorted numbers in increasing order:&quot;);=
</p>

<p class=3DMsoNormal>disp(sortedNumbers);</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal style=3D'margin-left:0in;text-indent:0in;mso-list:l3 l=
evel1 lfo1'><![if !supportLists]><b><span
style=3D'mso-fareast-font-family:Calibri;mso-fareast-theme-font:minor-latin;
mso-bidi-font-family:Calibri;mso-bidi-theme-font:minor-latin'><span
style=3D'mso-list:Ignore'>4. </span></span></b><![endif]><b>Linear search. =
Accept
5 numbers from the user and number to find.<o:p></o:p></b></p>

<p class=3DMsoNormal>// Linear Search in Scilab</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Accept 5 numbers from the user</p>

<p class=3DMsoNormal>numbers =3D zeros(1, 5); // Initialize an empty array =
for 5
numbers</p>

<p class=3DMsoNormal>for i =3D 1:5</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>numbers(i) =3D input(&quot;Enter a number: &quot;);</p>

<p class=3DMsoNormal>end</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Accept the number to find</p>

<p class=3DMsoNormal>target =3D input(&quot;Enter the number to find: &quot=
;);</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Linear Search Algorithm</p>

<p class=3DMsoNormal>found =3D false;</p>

<p class=3DMsoNormal>for i =3D 1:5</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>if
numbers(i) =3D=3D target then</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>found =3D true;</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>position =3D i;</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>break;</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>end</p>

<p class=3DMsoNormal>end</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Display the result</p>

<p class=3DMsoNormal>if found then</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>disp(&quot;Number found at position: &quot; + string(position));</p>

<p class=3DMsoNormal>else</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>disp(&quot;Number not found.&quot;);</p>

<p class=3DMsoNormal>end</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal style=3D'margin-left:0in;text-indent:0in;mso-list:l3 l=
evel1 lfo1'><![if !supportLists]><b><span
style=3D'mso-fareast-font-family:Calibri;mso-fareast-theme-font:minor-latin;
mso-bidi-font-family:Calibri;mso-bidi-theme-font:minor-latin'><span
style=3D'mso-list:Ignore'>5. </span></span></b><![endif]><b>Binary search. =
Accept
5 numbers from the user and number to find.<o:p></o:p></b></p>

<p class=3DMsoNormal>// Binary Search in Scilab (Simplified)</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Accept 5 numbers from the user</p>

<p class=3DMsoNormal>numbers =3D zeros(1, 5);</p>

<p class=3DMsoNormal>for i =3D 1:5</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>numbers(i) =3D input(&quot;Enter a number: &quot;);</p>

<p class=3DMsoNormal>end</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Sort the numbers to make binary search work</p>

<p class=3DMsoNormal>numbers =3D sort(numbers);</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Accept the number to find</p>

<p class=3DMsoNormal>target =3D input(&quot;Enter the number to find: &quot=
;);</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Binary Search Algorithm</p>

<p class=3DMsoNormal>low =3D 1;</p>

<p class=3DMsoNormal>high =3D 5;</p>

<p class=3DMsoNormal>found =3D false;</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>while low &lt;=3D high</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>mid
=3D floor((low + high) / 2);</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span></p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>if
numbers(mid) =3D=3D target then</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>found =3D true;</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>break;</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>elseif numbers(mid) &lt; target then</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n>low
=3D mid + 1;</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>else</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n>high
=3D mid - 1;</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>end</p>

<p class=3DMsoNormal>end</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Display result</p>

<p class=3DMsoNormal>if found then</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>disp(&quot;Number found.&quot;);</p>

<p class=3DMsoNormal>else</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>disp(&quot;Number not found.&quot;);</p>

<p class=3DMsoNormal>end</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal><b>6.Create a random array of n integers. Accept a val=
ue X
from the user and use linear search algorithm to check whether the number is
present in the array or not and output the position if the number is presen=
t.<o:p></o:p></b></p>

<p class=3DMsoNormal>// Linear Search for a random array</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Accept the value of n (number of elements in the ar=
ray)</p>

<p class=3DMsoNormal>n =3D input(&quot;Enter the number of elements in the =
array:
&quot;);</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Generate a random array of n integers between 1 and=
 100</p>

<p class=3DMsoNormal>numbers =3D randi(100, 1, n);</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Display the generated array</p>

<p class=3DMsoNormal>disp(&quot;Generated array:&quot;);</p>

<p class=3DMsoNormal>disp(numbers);</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Accept the value X to search for</p>

<p class=3DMsoNormal>X =3D input(&quot;Enter the number to search for: &quo=
t;);</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Linear Search Algorithm</p>

<p class=3DMsoNormal>found =3D false;</p>

<p class=3DMsoNormal>for i =3D 1:n</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>if
numbers(i) =3D=3D X then</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>found =3D true;</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>position =3D i;</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>break;</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>end</p>

<p class=3DMsoNormal>end</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Output the result</p>

<p class=3DMsoNormal>if found then</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>disp(&quot;Number found at position: &quot; + string(position));</p>

<p class=3DMsoNormal>else</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>disp(&quot;Number not found.&quot;);</p>

<p class=3DMsoNormal>End</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal><b>7.Write a Scilab program to sort a random array of n
integers (accept the value of n from user) in ascending order by using:<o:p=
></o:p></b></p>

<p class=3DMsoNormal><b><span style=3D'mso-spacerun:yes'>&nbsp;</span>a qui=
ck sort
algorithm.<o:p></o:p></b></p>

<p class=3DMsoNormal>// Quick Sort in Scilab</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Function for Quick Sort</p>

<p class=3DMsoNormal>function arr =3D quickSort(arr)</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>if
length(arr) &lt;=3D 1 then</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>return arr;</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>end</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>pivot =3D arr(1);<span style=3D'mso-spacerun:yes'>&nbsp; </span>// S=
elect
the first element as the pivot</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>left =3D arr(arr &lt; pivot);<span style=3D'mso-spacerun:yes'>&nbsp;=
&nbsp;
</span>// Elements smaller than pivot</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>right =3D arr(arr &gt; pivot);<span style=3D'mso-spacerun:yes'>&nbsp;
</span>// Elements greater than pivot</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>arr
=3D [quickSort(left), pivot, quickSort(right)];<span
style=3D'mso-spacerun:yes'>&nbsp; </span>// Recursively sort left and right=
</p>

<p class=3DMsoNormal>endfunction</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Main program</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Accept the value of n (size of the array)</p>

<p class=3DMsoNormal>n =3D input(&quot;Enter the number of elements in the =
array:
&quot;);</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Generate a random array of n integers between 1 and=
 100</p>

<p class=3DMsoNormal>numbers =3D randi(100, 1, n);</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Display the original array</p>

<p class=3DMsoNormal>disp(&quot;Original array:&quot;);</p>

<p class=3DMsoNormal>disp(numbers);</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Sort the array using quick sort</p>

<p class=3DMsoNormal>sortedArray =3D quickSort(numbers);</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Display the sorted array</p>

<p class=3DMsoNormal>disp(&quot;Sorted array in ascending order:&quot;);</p>

<p class=3DMsoNormal>disp(sortedArray);</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal><b>8.selection sort algorithm.<o:p></o:p></b></p>

<p class=3DMsoNormal>// Selection Sort in Scilab</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Function for Selection Sort</p>

<p class=3DMsoNormal>function arr =3D selectionSort(arr)</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>n =3D
length(arr);</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>for
i =3D 1:n-1</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>minIndex =3D i;<span style=3D'mso-spacerun:yes'>&nbsp; </span>// Ass=
ume the
minimum element is at the current position</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n></p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n>//
Find the smallest element in the unsorted part of the array</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n>for
j =3D i+1:n</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;
</span>if arr(j) &lt; arr(minIndex) then</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>minIndex =3D j;</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;</span><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;
</span>end</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n>end</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n></p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n>//
Swap the found minimum element with the first element of the unsorted part<=
/p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n>if
minIndex !=3D i then</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;
</span>temp =3D arr(i);</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;
</span>arr(i) =3D arr(minIndex);</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;
</span>arr(minIndex) =3D temp;</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
style=3D'mso-spacerun:yes'>&nbsp;</span>end</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>end</p>

<p class=3DMsoNormal>endfunction</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Main program</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Accept the value of n (size of the array)</p>

<p class=3DMsoNormal>n =3D input(&quot;Enter the number of elements in the =
array:
&quot;);</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Generate a random array of n integers between 1 and=
 100</p>

<p class=3DMsoNormal>numbers =3D randi(100, 1, n);</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Display the original array</p>

<p class=3DMsoNormal>disp(&quot;Original array:&quot;);</p>

<p class=3DMsoNormal>disp(numbers);</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Sort the array using selection sort</p>

<p class=3DMsoNormal>sortedArray =3D selectionSort(numbers);</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Display the sorted array</p>

<p class=3DMsoNormal>disp(&quot;Sorted array in ascending order:&quot;);</p>

<p class=3DMsoNormal>disp(sortedArray);</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal><b>9.a counting sort algorithm.<o:p></o:p></b></p>

<p class=3DMsoNormal>// Simplified Counting Sort in Scilab</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Function for Counting Sort</p>

<p class=3DMsoNormal>function arr =3D countingSort(arr)</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>//
Find the maximum and minimum elements in the array</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>maxVal =3D max(arr);</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>minVal =3D min(arr);</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span></p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>//
Create a count array and initialize with zeros</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>count =3D zeros(1, maxVal - minVal + 1);</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span></p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>//
Fill the count array with the frequency of each number</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>for
i =3D 1:length(arr)</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>count(arr(i) - minVal + 1) =3D count(arr(i) - minVal + 1) + 1;</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>end</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span></p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>//
Rebuild the sorted array</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>sortedArr =3D [];</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>for
i =3D 1:length(count)</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>sortedArr =3D [sortedArr, ones(1, count(i)) * (i + minVal - 1)];</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>end</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>arr
=3D sortedArr;<span style=3D'mso-spacerun:yes'>&nbsp; </span>// Update the =
input
array with sorted values</p>

<p class=3DMsoNormal>endfunction</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Main program</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Accept the value of n (size of the array)</p>

<p class=3DMsoNormal>n =3D input(&quot;Enter the number of elements in the =
array:
&quot;);</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Generate a random array of n integers between 1 and=
 100</p>

<p class=3DMsoNormal>numbers =3D randi(100, 1, n);</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Display the original array</p>

<p class=3DMsoNormal>disp(&quot;Original array:&quot;);</p>

<p class=3DMsoNormal>disp(numbers);</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Sort the array using counting sort</p>

<p class=3DMsoNormal>sortedArray =3D countingSort(numbers);</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Display the sorted array</p>

<p class=3DMsoNormal>disp(&quot;Sorted array in ascending order:&quot;);</p>

<p class=3DMsoNormal>disp(sortedArray);</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal><b>10 .Write a Scilab program to perform the following
sorting for a given list of numbers:<o:p></o:p></b></p>

<p class=3DMsoNormal><b>Element in array: 5,2,10,4,9,2,18<o:p></o:p></b></p>

<p class=3DMsoNormal><b><span style=3D'mso-spacerun:yes'>&nbsp;</span>Bubbl=
e sort
[10M]<o:p></o:p></b></p>

<p class=3DMsoNormal>// Bubble Sort in Scilab</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Function to perform Bubble Sort</p>

<p class=3DMsoNormal>function arr =3D bubbleSort(arr)</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>n =3D
length(arr);</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>for
i =3D 1:n-1</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n>for
j =3D 1:n-i</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;
</span>if arr(j) &gt; arr(j+1) then</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>// Swap elements if they are in the wrong order</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>temp =3D arr(j);</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>arr(j) =3D arr(j+1);</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>arr(j+1) =3D temp;</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;
</span>end</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n>end</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>end</p>

<p class=3DMsoNormal>endfunction</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Main program</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Given list of numbers</p>

<p class=3DMsoNormal>numbers =3D [5, 2, 10, 4, 9, 2, 18];</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Display the original array</p>

<p class=3DMsoNormal>disp(&quot;Original array:&quot;);</p>

<p class=3DMsoNormal>disp(numbers);</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Sort the array using Bubble Sort</p>

<p class=3DMsoNormal>sortedArray =3D bubbleSort(numbers);</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Display the sorted array</p>

<p class=3DMsoNormal>disp(&quot;Sorted array in ascending order:&quot;);</p>

<p class=3DMsoNormal>disp(sortedArray);</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal style=3D'margin-left:0in;text-indent:0in;mso-list:l2 l=
evel1 lfo2'><![if !supportLists]><b><span
style=3D'mso-fareast-font-family:Calibri;mso-fareast-theme-font:minor-latin;
mso-bidi-font-family:Calibri;mso-bidi-theme-font:minor-latin'><span
style=3D'mso-list:Ignore'>11. </span></span></b><![endif]><b>Insertion sort=
 [10M]<o:p></o:p></b></p>

<p class=3DMsoNormal>// Insertion Sort in Scilab</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Function to perform Insertion Sort</p>

<p class=3DMsoNormal>function arr =3D insertionSort(arr)</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>n =3D
length(arr);</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>for
i =3D 2:n<span style=3D'mso-spacerun:yes'>&nbsp; </span>// Start from the s=
econd
element</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n>key
=3D arr(i);<span style=3D'mso-spacerun:yes'>&nbsp; </span>// Element to be =
inserted</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n>j =3D
i - 1;</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n></p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;</span><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>// M=
ove
elements of arr[0..i-1] that are greater than key to one position ahead</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>while j &gt; 0 &amp; arr(j) &gt; key</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;
</span>arr(j+1) =3D arr(j);</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;
</span>j =3D j - 1;</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n>end</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n></p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>arr(j+1) =3D key;<span style=3D'mso-spacerun:yes'>&nbsp; </span>// I=
nsert
the key in its correct position</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>end</p>

<p class=3DMsoNormal>endfunction</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Main program</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Given list of numbers</p>

<p class=3DMsoNormal>numbers =3D [5, 2, 10, 4, 9, 2, 18];</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Display the original array</p>

<p class=3DMsoNormal>disp(&quot;Original array:&quot;);</p>

<p class=3DMsoNormal>disp(numbers);</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Sort the array using Insertion Sort</p>

<p class=3DMsoNormal>sortedArray =3D insertionSort(numbers);</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Display the sorted array</p>

<p class=3DMsoNormal>disp(&quot;Sorted array in ascending order:&quot;);</p>

<p class=3DMsoNormal>disp(sortedArray);</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal style=3D'margin-left:0in;text-indent:0in;mso-list:l2 l=
evel1 lfo2'><![if !supportLists]><b><span
style=3D'mso-fareast-font-family:Calibri;mso-fareast-theme-font:minor-latin;
mso-bidi-font-family:Calibri;mso-bidi-theme-font:minor-latin'><span
style=3D'mso-list:Ignore'>12. </span></span></b><![endif]><b>Bubble sort [1=
0M]<o:p></o:p></b></p>

<p class=3DMsoNormal>// Bubble Sort in Scilab</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Function to perform Bubble Sort</p>

<p class=3DMsoNormal>function arr =3D bubbleSort(arr)</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>n =3D
length(arr);<span style=3D'mso-spacerun:yes'>&nbsp; </span>// Get the lengt=
h of
the array</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>for
i =3D 1:n-1<span style=3D'mso-spacerun:yes'>&nbsp; </span>// Loop through e=
ach
element of the array</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n>for
j =3D 1:n-i<span style=3D'mso-spacerun:yes'>&nbsp; </span>// Last i element=
s are
already sorted</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;
</span>if arr(j) &gt; arr(j+1) then<span style=3D'mso-spacerun:yes'>&nbsp;
</span>// Compare adjacent elements</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span=
>//
Swap elements if they are in the wrong order</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>temp =3D arr(j);</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>arr(j) =3D arr(j+1);</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>arr(j+1) =3D temp;</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;
</span>end</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n>end</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>end</p>

<p class=3DMsoNormal>endfunction</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Main program</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Given list of numbers</p>

<p class=3DMsoNormal>numbers =3D [5, 2, 10, 4, 9, 2, 18];</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Display the original array</p>

<p class=3DMsoNormal>disp(&quot;Original array:&quot;);</p>

<p class=3DMsoNormal>disp(numbers);</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Sort the array using Bubble Sort</p>

<p class=3DMsoNormal>sortedArray =3D bubbleSort(numbers);</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Display the sorted array</p>

<p class=3DMsoNormal>disp(&quot;Sorted array in ascending order:&quot;);</p>

<p class=3DMsoNormal>disp(sortedArray);</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal style=3D'margin-left:0in;text-indent:0in;mso-list:l2 l=
evel1 lfo2'><![if !supportLists]><b><span
style=3D'mso-fareast-font-family:Calibri;mso-fareast-theme-font:minor-latin;
mso-bidi-font-family:Calibri;mso-bidi-theme-font:minor-latin'><span
style=3D'mso-list:Ignore'>13. </span></span></b><![endif]><b>Write a Scilab
program for the implementation of following:<o:p></o:p></b></p>

<p class=3DMsoNormal><b><span style=3D'mso-spacerun:yes'>&nbsp;</span>Topol=
ogical
sorting. [10M]<o:p></o:p></b></p>

<p class=3DMsoNormal>// Topological Sorting using Kahn's Algorithm in Scila=
b</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Function to perform Topological Sort using Kahn's
Algorithm</p>

<p class=3DMsoNormal>function topoSort(graph)</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>//
Get the number of vertices (nodes)</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>n =3D
size(graph, 1); </p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span></p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>//
Initialize an array to store in-degrees of all vertices</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>inDegree =3D zeros(1, n);</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span></p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>//
Compute in-degree for each vertex</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>for
i =3D 1:n</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n>for
j =3D 1:n</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;
</span><span style=3D'mso-spacerun:yes'>&nbsp;</span>if graph(i, j) =3D=3D =
1 then</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>inDegree(j) =3D inDegree(j) + 1;</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;
</span>end</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n>end</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>end</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span></p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>//
Initialize the queue with all vertices having in-degree 0</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>queue =3D [];</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>for
i =3D 1:n</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n>if
inDegree(i) =3D=3D 0 then</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;
</span>queue =3D [queue, i];<span style=3D'mso-spacerun:yes'>&nbsp; </span>=
// Add
to the queue (1-based index)</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n>end</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>end</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span></p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>//
Initialize a variable to keep track of the sorted order</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>sortedOrder =3D [];</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span></p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>//
Process the graph</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>while size(queue, 2) &gt; 0</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n>//
Get the first vertex from the queue</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n>u =3D
queue(1);</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>queue =3D queue(2:$);<span style=3D'mso-spacerun:yes'>&nbsp; </span>=
//
Remove the first element from the queue</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n></p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n>//
Add the vertex to the sorted order</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>sortedOrder =3D [sortedOrder, u];</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n></p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n>//
Decrease in-degree for all the adjacent vertices of u</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n>for
v =3D 1:n</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;
</span>if graph(u, v) =3D=3D 1 then</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>inDegree(v) =3D inDegree(v) - 1;</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>// If in-degree becomes 0, add v to the queue</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>if inDegree(v) =3D=3D 0 then</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>queue =3D [queue, v];</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>end</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;
</span>end</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n>end</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>end</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span></p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>//
Check if there was a cycle (in case the graph is not a DAG)</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>if
size(sortedOrder, 2) !=3D n then</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>disp(&quot;Cycle detected! Topological sort is not possible.&quot;);=
</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>else</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n>//
Display the topologically sorted order</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>disp(&quot;Topological sorted order:&quot;);</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>disp(sortedOrder);</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>end</p>

<p class=3DMsoNormal>endfunction</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Main program</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Adjacency matrix representation of the directed gra=
ph</p>

<p class=3DMsoNormal>// Here, graph[i][j] =3D 1 means an edge from vertex i=
 to
vertex j</p>

<p class=3DMsoNormal>graph =3D [</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>0,
1, 0, 0, 0;<span style=3D'mso-spacerun:yes'>&nbsp; </span>// Vertex 1 -&gt;
Vertex 2</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>0,
0, 1, 0, 0;<span style=3D'mso-spacerun:yes'>&nbsp; </span>// Vertex 2 -&gt;
Vertex 3</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>0,
0, 0, 1, 0;<span style=3D'mso-spacerun:yes'>&nbsp; </span>// Vertex 3 -&gt;
Vertex 4</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>0,
0, 0, 0, 1;<span style=3D'mso-spacerun:yes'>&nbsp; </span>// Vertex 4 -&gt;
Vertex 5</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>0,
0, 0, 0, 0;<span style=3D'mso-spacerun:yes'>&nbsp; </span>// Vertex 5 (no
outgoing edges)</p>

<p class=3DMsoNormal>];</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Perform Topological Sort</p>

<p class=3DMsoNormal>topoSort(graph);</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal style=3D'margin-left:0in;text-indent:0in;mso-list:l2 l=
evel1 lfo2'><![if !supportLists]><b><span
style=3D'mso-fareast-font-family:Calibri;mso-fareast-theme-font:minor-latin;
mso-bidi-font-family:Calibri;mso-bidi-theme-font:minor-latin'><span
style=3D'mso-list:Ignore'>14. </span></span></b><![endif]><b>n-Queens probl=
em
using a backtracking method. [10M]<o:p></o:p></b></p>

<p class=3DMsoNormal>// Function to check if a queen can be placed at
board[row][col]</p>

<p class=3DMsoNormal>function isSafe(board, row, col, N)</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>//
Check this column on the upper side</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>for
i =3D 1:row-1</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n>if
board(i, col) =3D=3D 1 then</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;
</span>return %F; // Return false if there's another queen in the same colu=
mn</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n>end</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>end</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span></p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>//
Check the upper left diagonal</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>for
i =3D 1:row-1</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n>if
col - (row - i) &gt;=3D 1 &amp; board(i, col - (row - i)) =3D=3D 1 then</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;
</span>return %F; // Return false if there's another queen in the upper left
diagonal</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n>end</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>end</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span></p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>//
Check the upper right diagonal</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>for
i =3D 1:row-1</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n>if
col + (row - i) &lt;=3D N &amp; board(i, col + (row - i)) =3D=3D 1 then</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;
</span>return %F; // Return false if there's another queen in the upper rig=
ht
diagonal</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n>end</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>end</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span></p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>return %T; // Return true if no conflicts are found</p>

<p class=3DMsoNormal>endfunction</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Function to solve N-Queens using backtracking</p>

<p class=3DMsoNormal>function solveNQueens(board, row, N)</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>if
row &gt; N then</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n>//
All queens are placed, print the solution</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>disp(board);</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
style=3D'mso-spacerun:yes'>&nbsp;</span>return %T; // Return true to stop f=
urther
recursion</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>end</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span></p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>//
Try placing a queen in all columns of the current row</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>for
col =3D 1:N</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n>if
isSafe(board, row, col, N) then</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;
</span>board(row, col) =3D 1; // Place the queen</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;
</span></p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp; </span><=
span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;</span>//
Recursively place queens in the next row</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;
</span>if solveNQueens(board, row + 1, N) then</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>return %T; // If the next row placement is successful, return true</=
p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;
</span>end</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;
</span></p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;
</span>// If placing queen at board[row][col] doesn't lead to a solution,
backtrack</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;
</span>board(row, col) =3D 0; // Remove the queen</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n>end</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>end</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span></p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>return %F; // If no position is found, return false</p>

<p class=3DMsoNormal>endfunction</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Main function to solve N-Queens problem</p>

<p class=3DMsoNormal>function NQueens(N)</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>//
Initialize the board with all zeros (no queens placed)</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>board =3D zeros(N, N);</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span></p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>//
Call the solveNQueens function starting from the first row</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>if
~solveNQueens(board, 1, N) then</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>disp(&quot;Solution does not exist.&quot;);</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>end</p>

<p class=3DMsoNormal>endfunction</p>

<p class=3DMsoNormal>// Example usage: Solve the 4-Queens problem</p>

<p class=3DMsoNormal>N =3D 4;</p>

<p class=3DMsoNormal>NQueens(N);</p>

<p class=3DMsoNormal><b>15.Implement an application of DFS such as to find =
the
topological sort of a directed<o:p></o:p></b></p>

<p class=3DMsoNormal><b>acyclic graph.<o:p></o:p></b></p>

<p class=3DMsoNormal>// Function to perform DFS on the graph and store the
topological sort</p>

<p class=3DMsoNormal>function dfs(graph, visited, stack, node, N)</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>//
Mark the current node as visited</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>visited(node) =3D 1;</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span></p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>//
Recursively visit all adjacent vertices of the current node</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>for
i =3D 1:N</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n>if
graph(node, i) =3D=3D 1 &amp; visited(i) =3D=3D 0 then</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;
</span>dfs(graph, visited, stack, i, N);</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n>end</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>end</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span></p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>//
Push the current node to the stack after processing all its neighbors</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>stack =3D [node, stack];</p>

<p class=3DMsoNormal>endfunction</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Function to perform topological sorting on a DAG us=
ing
DFS</p>

<p class=3DMsoNormal>function topologicalSort(graph, N)</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>visited =3D zeros(1, N);<span style=3D'mso-spacerun:yes'>&nbsp; </sp=
an>//
Array to keep track of visited nodes</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>stack =3D [];<span style=3D'mso-spacerun:yes'>&nbsp; </span>// Stack=
 to
store the topologically sorted order</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span></p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>//
Call DFS for all unvisited nodes</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>for
node =3D 1:N</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
style=3D'mso-spacerun:yes'>&nbsp;</span>if visited(node) =3D=3D 0 then</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;
</span>dfs(graph, visited, stack, node, N);</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n>end</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>end</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span></p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>//
Display the topologically sorted order</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>disp(&quot;Topologically sorted order:&quot;);</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>disp(stack);</p>

<p class=3DMsoNormal>endfunction</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Example: Adjacency matrix representation of a direc=
ted
acyclic graph (DAG)</p>

<p class=3DMsoNormal>graph =3D [</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>0,
1, 0, 0, 0;<span style=3D'mso-spacerun:yes'>&nbsp; </span>// Node 1 -&gt; N=
ode 2</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>0,
0, 1, 0, 0;<span style=3D'mso-spacerun:yes'>&nbsp; </span>// Node 2 -&gt; N=
ode 3</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>0,
0, 0, 1, 0;<span style=3D'mso-spacerun:yes'>&nbsp; </span>// Node 3 -&gt; N=
ode 4</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>0,
0, 0, 0, 1;<span style=3D'mso-spacerun:yes'>&nbsp; </span>// Node 4 -&gt; N=
ode 5</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>0,
0, 0, 0, 0<span style=3D'mso-spacerun:yes'>&nbsp;&nbsp; </span>// Node 5 (n=
o outgoing
edges)</p>

<p class=3DMsoNormal>];</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Call the topologicalSort function to get the topolo=
gical
order</p>

<p class=3DMsoNormal>topologicalSort(graph, 5);</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal><b>16.Write a Scilab program for implementing an appli=
cation
of BFS such as to find<o:p></o:p></b></p>

<p class=3DMsoNormal><b>connected components of an undirected graph.<o:p></=
o:p></b></p>

<p class=3DMsoNormal>// Function to perform BFS and mark the connected comp=
onent</p>

<p class=3DMsoNormal>function bfs(graph, visited, start_node, N)</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>queue =3D [];<span style=3D'mso-spacerun:yes'>&nbsp; </span>// Queue=
 for BFS</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>visited(start_node) =3D 1;<span style=3D'mso-spacerun:yes'>&nbsp; </=
span>//
Mark the start node as visited</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>queue =3D [queue, start_node];<span style=3D'mso-spacerun:yes'>&nbsp;
</span>// Add start node to queue</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>while size(queue, 2) &gt; 0 do</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n>node
=3D queue(1);<span style=3D'mso-spacerun:yes'>&nbsp; </span>// Dequeue the =
front
node</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>queue =3D queue(2:$);<span style=3D'mso-spacerun:yes'>&nbsp; </span>=
//
Remove the front node from the queue</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n>//
Print the current node (part of the connected component)</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>disp(node);</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n>//
Traverse all neighbors of the current node</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n>for
i =3D 1:N</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;
</span>if graph(node, i) =3D=3D 1 &amp; visited(i) =3D=3D 0 then</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>visited(i) =3D 1;<span style=3D'mso-spacerun:yes'>&nbsp; </span>// M=
ark the
neighbor as visited</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>queue =3D [queue, i];<span style=3D'mso-spacerun:yes'>&nbsp; </span>=
//
Enqueue the neighbor</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;
</span>end</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n>end</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>end</p>

<p class=3DMsoNormal>endfunction</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Function to find and print all connected components=
 using
BFS</p>

<p class=3DMsoNormal>function connectedComponents(graph, N)</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>visited =3D zeros(1, N);<span style=3D'mso-spacerun:yes'>&nbsp; </sp=
an>//
Array to track visited nodes</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>//
Iterate through all nodes to find unvisited nodes and perform BFS</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>component_number =3D 1;</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>for
node =3D 1:N</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n>if
visited(node) =3D=3D 0 then</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;
</span>disp(&quot;Component &quot; + string(component_number) + &quot;:&quo=
t;);</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;
</span>bfs(graph, visited, node, N);<span style=3D'mso-spacerun:yes'>&nbsp;
</span>// Call BFS from an unvisited node</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp; </span><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;</span>component_number
=3D component_number + 1;</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;
</span>disp(&quot;------&quot;);</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n>end</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>end</p>

<p class=3DMsoNormal>endfunction</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Example: Adjacency matrix representation of an undi=
rected
graph</p>

<p class=3DMsoNormal>graph =3D [</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>0,
1, 1, 0, 0;<span style=3D'mso-spacerun:yes'>&nbsp; </span>// Node 1 is conn=
ected
to Node 2 and Node 3</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp; </span><=
span
style=3D'mso-spacerun:yes'>&nbsp;</span>1, 0, 1, 0, 0;<span
style=3D'mso-spacerun:yes'>&nbsp; </span>// Node 2 is connected to Node 1 a=
nd
Node 3</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>1,
1, 0, 1, 0;<span style=3D'mso-spacerun:yes'>&nbsp; </span>// Node 3 is conn=
ected
to Node 1, Node 2, and Node 4</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>0,
0, 1, 0, 1;<span style=3D'mso-spacerun:yes'>&nbsp; </span>// Node 4 is conn=
ected
to Node 3 and Node 5</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>0,
0, 0, 1, 0<span style=3D'mso-spacerun:yes'>&nbsp;&nbsp; </span>// Node 5 is
connected to Node 4</p>

<p class=3DMsoNormal>];</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Call the connectedComponents function to find and d=
isplay
all components</p>

<p class=3DMsoNormal>connectedComponents(graph, 5);</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal align=3Dcenter style=3D'text-align:center'>20 MARKS</p>

<p class=3DMsoNormal style=3D'margin-left:0in;text-indent:0in;mso-list:l1 l=
evel1 lfo3;
tab-stops:15.6pt'><![if !supportLists]><b><span style=3D'mso-fareast-font-f=
amily:
Calibri;mso-fareast-theme-font:minor-latin;mso-bidi-font-family:Calibri;
mso-bidi-theme-font:minor-latin'><span style=3D'mso-list:Ignore'>17.<span
style=3D'font:7.0pt "Times New Roman"'>&nbsp; </span></span></span></b><![e=
ndif]><b>Write
a Scilab program to solve the following problem:<o:p></o:p></b></p>

<p class=3DMsoNormal><b>Nuts &amp; Bolts Problem (Lock &amp; Key problem) u=
sing
Quick Sort. Given a set of n nuts of different sizes and n bolts of differe=
nt
sizes. There is a one-one mapping between nuts and bolts. Match nuts and bo=
lts
efficiently. Constraint: Comparison of a nut to another nut or a bolt to
another bolt is not<o:p></o:p></b></p>

<p class=3DMsoNormal><b>allowed. It means a nut can only be compared with a=
 bolt
and a bolt can only be compared with a nut to see which one is bigger/small=
er.
Another way of asking this problem is, to give a box with locks and keys wh=
ere
one lock can be opened by one key in the box. We need to match the pair.<o:=
p></o:p></b></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'>function [nuts, bolts] =3D matchNutsAndBolts=
(nuts,
bolts)<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </span>if length(nuts) &lt;&g=
t;
length(bolts) then<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>error(&quot;The number of nuts and bolts must be the same.&quot;);<o=
:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </span>end<o:p></o:p></span><=
/p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><o:p>&nbsp;</o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </span>[nuts, bolts] =3D
quicksortMatch(nuts, bolts);<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'>endfunction<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><o:p>&nbsp;</o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'>function [sortedNuts, sortedBolts] =3D
quicksortMatch(nuts, bolts)<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </span>n =3D length(nuts);<o:=
p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><o:p>&nbsp;</o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </span>if n &lt;=3D 1 then<o:=
p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>sortedNuts =3D nuts;<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>sortedBolts =3D bolts;<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>return;<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </span>end<o:p></o:p></span><=
/p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><o:p>&nbsp;</o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </span>// Choose a pivot bolt=
<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </span>pivotBolt =3D bolts($)=
; //
Last element of bolts array<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </span>// Partition nuts using
pivot bolt<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </span>[leftNuts, rightNuts,
matchedNut] =3D partition(nuts, pivotBolt);<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </span><o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </span>// Partition bolts usi=
ng the
matched nut<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </span>[leftBolts, rightBolts=
] =3D
partition(bolts, matchedNut);<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><o:p>&nbsp;</o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </span>// Recursively sort and
match<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </span>[sortedLeftNuts,
sortedLeftBolts] =3D quicksortMatch(leftNuts, leftBolts);<o:p></o:p></span>=
</p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </span>[sortedRightNuts,
sortedRightBolts] =3D quicksortMatch(rightNuts, rightBolts);<o:p></o:p></sp=
an></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><o:p>&nbsp;</o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </span>// Combine results<o:p=
></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </span>sortedNuts =3D
[sortedLeftNuts, matchedNut, sortedRightNuts];<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </span>sortedBolts =3D
[sortedLeftBolts, pivotBolt, sortedRightBolts];<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </span><o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'>endfunction<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><o:p>&nbsp;</o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'>function [leftPartition, rightPartition,
matchedElement] =3D partition(array, pivot)<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </span>leftPartition =3D [];<=
o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </span>rightPartition =3D [];=
<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </span>matchedElement =3D [];=
<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </span>for i =3D 1:length(arr=
ay) do<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n>if
array(i) &lt; pivot then<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;
</span>leftPartition =3D [leftPartition, array(i)];<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>elseif array(i) &gt; pivot then<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;
</span>rightPartition =3D [rightPartition, array(i)];<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n>else<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;
</span>matchedElement =3D array(i);<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n>end<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </span>end<o:p></o:p></span><=
/p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'>endfunction<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><o:p>&nbsp;</o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'>nuts =3D [5, 25, 80, 3, 6, 4];<o:p></o:p></s=
pan></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'>bolts =3D [4, 6, 25, 5, 3, 80];<o:p></o:p></=
span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'>[nuts, bolts] =3D matchNutsAndBolts(nuts, bo=
lts);<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'>disp(&quot;Matched Nuts:&quot;);<o:p></o:p><=
/span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'>disp(nuts);<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'>disp(&quot;Matched Bolts:&quot;);<o:p></o:p>=
</span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'>disp(bolts);<o:p></o:p></span></p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal><b>18.Generate a binary string of length N using branc=
h and
bound technique.<o:p></o:p></b></p>

<p class=3DMsoNormal><b>(Input: N =3D 3 Output: 000 001 010 011 100 101 110=
 111
Explanation: Numbers<o:p></o:p></b></p>

<p class=3DMsoNormal><b>with 3 binary digits are 0, 1, 2, 3, 4, 5, 6, 7 Inp=
ut: N
=3D 2 Output: 00 01 10 11)<o:p></o:p></b></p>

<p class=3DMsoNormal>// Function to recursively generate binary strings usi=
ng
branch and bound</p>

<p class=3DMsoNormal>function generateBinaryStrings(N, currentString)</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>//
If the current string reaches length N, print it</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>if
length(currentString) =3D=3D N then</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>disp(currentString);<span style=3D'mso-spacerun:yes'>&nbsp; </span>//
Print the binary string</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>return;</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>end</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span></p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>//
Branch to the next level: append '0' or '1'</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>generateBinaryStrings(N, currentString + &quot;0&quot;);<span
style=3D'mso-spacerun:yes'>&nbsp; </span>// Append '0' and recurse</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>generateBinaryStrings(N, currentString + &quot;1&quot;);<span
style=3D'mso-spacerun:yes'>&nbsp; </span>// Append '1' and recurse</p>

<p class=3DMsoNormal>endfunction</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Main function to initiate the binary string generat=
ion</p>

<p class=3DMsoNormal>function generateAllBinaryStrings(N)</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>generateBinaryStrings(N, &quot;&quot;);<span
style=3D'mso-spacerun:yes'>&nbsp; </span>// Start with an empty string</p>

<p class=3DMsoNormal>endfunction</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Example usage:</p>

<p class=3DMsoNormal>N =3D 3;<span style=3D'mso-spacerun:yes'>&nbsp; </span=
>// Length
of the binary strings</p>

<p class=3DMsoNormal>generateAllBinaryStrings(N);</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal style=3D'margin-left:0in;text-indent:0in;mso-list:l1 l=
evel1 lfo3;
tab-stops:15.6pt'><![if !supportLists]><b><span style=3D'mso-fareast-font-f=
amily:
Calibri;mso-fareast-theme-font:minor-latin;mso-bidi-font-family:Calibri;
mso-bidi-theme-font:minor-latin'><span style=3D'mso-list:Ignore'>18.<span
style=3D'font:7.0pt "Times New Roman"'>&nbsp; </span></span></span></b><![e=
ndif]><b>Suppose
we want to make an exam schedule for a university. We have listed different
subjects and students enrolled in every subject. Many subjects would have
common students (of the same batch, some backlog students, etc). How do we
schedule the exam so that no two exams with a common student are scheduled =
at
same time? How many minimum time slots are needed to schedule all exams? Th=
is
problem can be represented as a graph where every vertex is a subject and an
edge between two vertices means there is a common student. So this is a gra=
ph
coloring problem where the minimum number of time slots is equal to the
chromatic number of the graph. Write a Scilab program to solve the above
problem.<o:p></o:p></b></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'>function chromatic_number =3D
graph_coloring(graph)<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </span><o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </span>chromatic_number =3D 1=
;<span
style=3D'mso-spacerun:yes'>&nbsp; </span><o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </span><o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </span>colors =3D zeros(size(=
graph,
1), 1);<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </span><o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </span>function safe =3D
is_safe(vertex, color, graph, colors)<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n>safe
=3D %T; <o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n>for
i =3D 1:size(graph, 2)<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;
</span>if graph(vertex, i) =3D=3D 1 &amp;&amp; colors(i) =3D=3D color<o:p><=
/o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>safe =3D %F; <o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>break;<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;
</span>end<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n>end<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </span>end<o:p></o:p></span><=
/p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </span><o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </span>function solve(vertex,
graph, colors)<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n>if
vertex &gt; size(graph, 1)<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;
</span>current_chromatic_number =3D max(colors);<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;
</span>chromatic_number =3D max(chromatic_number, current_chromatic_number)=
;<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;
</span>return;<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n>end<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n><o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n>for
color =3D 1:max(chromatic_number, max(colors)) + 1<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;
</span>if is_safe(vertex, color, graph, colors)<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>colors(vertex) =3D color;<span style=3D'mso-spacerun:yes'>&nbsp; </s=
pan><o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>solve(vertex + 1, graph, colors);<span style=3D'mso-spacerun:yes'>&n=
bsp;
</span><o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>colors(vertex) =3D 0;<span style=3D'mso-spacerun:yes'>&nbsp; </span>=
<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;
</span><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;</span>end<o:p></o:p></=
span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n>end<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </span>end<o:p></o:p></span><=
/p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </span><o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </span>solve(1, graph, colors=
);<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'>end<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><o:p>&nbsp;</o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'>graph =3D [0 1 1 0; <o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>1 0 1 1;<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>1 1 0 1;<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>0 1 1 0];<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n><o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'>chromatic_number =3D graph_coloring(graph);<=
o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'>disp(&quot;Minimum time slots needed: &quot;=
 +
string(chromatic_number));<o:p></o:p></span></p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal><b>19.Write a Scilab program to solve a problem of maz=
e by
applying an appropriate<o:p></o:p></b></p>

<p class=3DMsoNormal><b>Algorithm.(MAZE PROBLEM)<o:p></o:p></b></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'>function move(m, n, x, y, maze)<o:p></o:p></=
span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </span>maze(x, y) =3D 0;<o:p>=
</o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </span>disp(maze);<o:p></o:p>=
</span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span style=3D'mso-spacerun:yes'>&nbsp;</spa=
n>if x
=3D=3D goal(1) &amp; y =3D=3D goal(2) then<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>return;<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </span>end<o:p></o:p></span><=
/p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;
</span>if x &lt; m &amp; maze(x + 1, y) =3D=3D 1 then<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>move(m, n, x + 1, y, maze);<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </span>end<o:p></o:p></span><=
/p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;
</span>if y &lt; n &amp; maze(x, y + 1) =3D=3D 1 then<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>move(m, n, x, y + 1, maze);<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </span>end<o:p></o:p></span><=
/p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;
</span>if y &gt; 1 &amp; maze(x, y - 1) =3D=3D 1 then<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>move(m, n, x, y - 1, maze);<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </span>end<o:p></o:p></span><=
/p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;
</span>if x &gt; 1 &amp; maze(x - 1, y) =3D=3D 1 then<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>move(m, n, x - 1, y, maze);<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </span>end<o:p></o:p></span><=
/p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'>endfunction<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'>function backtrack(x, y, maze)<o:p></o:p></s=
pan></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </span>maze(x, y) =3D 1;<o:p>=
</o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </span>disp(maze);<o:p></o:p>=
</span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp; </span>if x =3D=3D star=
t(1) &amp;
y =3D=3D start(2) then<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>return;<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </span>end<o:p></o:p></span><=
/p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </span>if x &lt; m &amp; maze=
(x +
1, y) =3D=3D 0 then<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>backtrack(x + 1, y, maze);<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </span>end<span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </span><o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </span>if y &lt; n &amp; maze=
(x, y
+ 1) =3D=3D 0 then<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>backtrack(x, y + 1, maze);<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </span>end <o:p></o:p></span>=
</p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </span>if y &gt; 1 &amp; maze=
(x, y
- 1) =3D=3D 0 then<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>backtrack(x, y - 1, maze);<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </span>end<o:p></o:p></span><=
/p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;
</span>if x &gt; 1 &amp; maze(x - 1, y) =3D=3D 0 then<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>backtrack(x - 1, y, maze);<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </span>end<o:p></o:p></span><=
/p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'>endfunction<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'>maze =3D [1, 0, 0, 0; <o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n>1,
1, 1, 1; <o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n>0,
1, 0, 1; <o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n>1,
0, 1, 1];<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'>start =3D [1, 1];<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'>goal =3D [4, 4];<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'>n =3D size(maze, 1);<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'>m =3D size(maze, 2);<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'>disp(maze);<o:p></o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><o:p>&nbsp;</o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'>move(m, n, start(1), start(2), maze);<o:p></=
o:p></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'>backtrack(goal(1), goal(2), maze);<o:p></o:p=
></span></p>

<p class=3DMsoNormal><span style=3D'font-size:12.0pt;mso-ascii-font-family:=
Calibri;
mso-hansi-font-family:Calibri'><o:p>&nbsp;</o:p></span></p>

<p class=3DMsoNormal><b>20.Write a Scilab program to find Minimum Cost Span=
ning
Tree of a given connected<o:p></o:p></b></p>

<p class=3DMsoNormal><b>undirected graph using Prim&#8217;s algorithm.<o:p>=
</o:p></b></p>

<p class=3DMsoNormal><b><o:p>&nbsp;</o:p></b></p>

<p class=3DMsoNormal>// Function to implement Prim's algorithm and find the=
 MST</p>

<p class=3DMsoNormal>function [mst, total_cost] =3D primsMST(graph, N)</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>//
Initialize the key values and parent array</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>key
=3D ones(1, N) * %inf;<span style=3D'mso-spacerun:yes'>&nbsp; </span>// Key=
 values
of vertices</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>parent =3D zeros(1, N);<span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>// Parent =
array
to store MST</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>mst
=3D zeros(1, N);<span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>// Array to track MST inclusion (1 if in MST, 0 if not)</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>key(1) =3D 0;<span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>// Starting from vertex 1 (index 1 in Scilab)</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span></p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>total_cost =3D 0;<span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;
</span>// Variable to store the total cost of MST</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span></p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>for
count =3D 1:N</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n>//
Find the vertex with the minimum key value</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n>u =3D
-1;</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>min_key =3D %inf;</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n></p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n>for
i =3D 1:N</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;
</span>if mst(i) =3D=3D 0 &amp; key(i) &lt; min_key then</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>min_key =3D key(i);</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>u =3D i;</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;
</span>end</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n>end</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n></p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n>//
Include vertex u in MST</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
style=3D'mso-spacerun:yes'>&nbsp;</span>mst(u) =3D 1;</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>total_cost =3D total_cost + key(u);<span style=3D'mso-spacerun:yes'>=
&nbsp;
</span>// Add the edge weight to total cost</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n></p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n>//
Update the key values of adjacent vertices</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n>for
v =3D 1:N</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;
</span>if graph(u, v) &gt; 0 &amp; mst(v) =3D=3D 0 &amp; graph(u, v) &lt; k=
ey(v)
then</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;</span>key(v)
=3D graph(u, v);<span style=3D'mso-spacerun:yes'>&nbsp; </span>// Update ke=
y value</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>parent(v) =3D u;<span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;
</span>// Set parent of vertex v</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;
</span>end</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n>end</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>end</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span></p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>//
Display the minimum spanning tree edges</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>disp(&quot;Edges in MST (parent, child, weight):&quot;);</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>for
i =3D 2:N<span style=3D'mso-spacerun:yes'>&nbsp; </span>// Starting from th=
e second
vertex (since the first one is arbitrary)</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>disp([parent(i), i, graph(parent(i), i)]);</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>end</p>

<p class=3DMsoNormal>endfunction</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Example graph (adjacency matrix) representation of a
connected undirected graph</p>

<p class=3DMsoNormal>graph =3D [</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp; </span><=
span
style=3D'mso-spacerun:yes'>&nbsp;</span>0, 2, 0, 6, 0;<span
style=3D'mso-spacerun:yes'>&nbsp; </span>// Vertex 1 connections</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>2,
0, 3, 8, 5;<span style=3D'mso-spacerun:yes'>&nbsp; </span>// Vertex 2 conne=
ctions</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>0,
3, 0, 0, 7;<span style=3D'mso-spacerun:yes'>&nbsp; </span>// Vertex 3 conne=
ctions</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>6,
8, 0, 0, 9;<span style=3D'mso-spacerun:yes'>&nbsp; </span>// Vertex 4 conne=
ctions</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>0,
5, 7, 9, 0<span style=3D'mso-spacerun:yes'>&nbsp;&nbsp; </span>// Vertex 5
connections</p>

<p class=3DMsoNormal>];</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Number of vertices</p>

<p class=3DMsoNormal>N =3D size(graph, 1);</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Call the Prim's algorithm function to find the MST<=
/p>

<p class=3DMsoNormal>[mst, total_cost] =3D primsMST(graph, N);</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Display the total cost of the MST</p>

<p class=3DMsoNormal>disp(&quot;Total cost of the Minimum Spanning Tree
(MST):&quot;);</p>

<p class=3DMsoNormal>disp(total_cost);</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal style=3D'margin-left:0in;text-indent:0in;mso-list:l4 l=
evel1 lfo4;
tab-stops:15.6pt'><![if !supportLists]><b><span style=3D'mso-fareast-font-f=
amily:
Calibri;mso-fareast-theme-font:minor-latin;mso-bidi-font-family:Calibri;
mso-bidi-theme-font:minor-latin'><span style=3D'mso-list:Ignore'>21.<span
style=3D'font:7.0pt "Times New Roman"'>&nbsp; </span></span></span></b><![e=
ndif]><b>Given
a set of cities and distance between every pair of cities, the problem is to
find the shortest possible tour that visits every city exactly once and ret=
urns
to the starting point.<o:p></o:p></b></p>

<p class=3DMsoNormal>function [min_distance, best_path] =3D
tspBranchBound(cost_matrix)</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>n =3D
size(cost_matrix, 1);<span style=3D'mso-spacerun:yes'>&nbsp; </span>// Numb=
er of
cities</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>visited =3D zeros(1, n); </p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>visited(1) =3D 1; // Start from the first city (city 0)</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>best_path =3D [];</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>[min_distance, best_path] =3D tsp_recursive(cost_matrix, visited, 1,=
 0, 1,
n, [0]);</p>

<p class=3DMsoNormal>endfunction</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>function [distance, best_path] =3D tsp_recursive(cost_=
matrix,
visited, current_city, current_distance, count, n, current_path)</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>if
count =3D=3D n then</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>final_distance =3D current_distance + cost_matrix(current_city, 1); =
</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>current_path =3D [current_path, 0]; </p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>distance =3D final_distance;</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>best_path =3D current_path; // Store the best path found</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>return;</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>end</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span></p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>min_distance =3D %inf; </p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>best_path =3D [];<span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;=
 </span></p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span></p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;</span></p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>for
next_city =3D 2:n</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n>if
visited(next_city) =3D=3D 0 then</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;
</span>visited(next_city) =3D 1; // Mark the city as visited</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;
</span>new_distance =3D current_distance + cost_matrix(current_city, next_c=
ity);</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;
</span></p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;
</span>[temp_distance, temp_path] =3D tsp_recursive(cost_matrix, visited,
next_city, new_distance, count + 1, n, [current_path, next_city - 1]);</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;
</span></p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;
</span></p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;
</span>if temp_distance &lt; min_distance then</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>min_distance =3D temp_distance;</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>best_path =3D temp_path; // Update best path if a new minimum distan=
ce is
found</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;
</span>end</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;
</span></p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;
</span>visited(next_city) =3D 0; // Backtrack, mark the city as unvisited</=
p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n>end</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>end</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span></p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>distance =3D min_distance; // Return the minimum distance for the cu=
rrent
recursion level</p>

<p class=3DMsoNormal>endfunction</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>function path_str =3D join_path_with_arrow(path)</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>path_str =3D string(path(1));<span style=3D'mso-spacerun:yes'>&nbsp;
</span>// Start with the first city</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>for
i =3D 2:length(path)</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>path_str =3D path_str + &quot;-&gt;&quot; + string(path(i));<span
style=3D'mso-spacerun:yes'>&nbsp; </span>// Append each city with
&quot;-&gt;&quot;</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>end</p>

<p class=3DMsoNormal>endfunction</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>cost_matrix =3D [0 10 15 20; 10 0 35 25; 15 35 0 30; 2=
0 25 30
0]; // Updated Distance matrix for 4 cities</p>

<p class=3DMsoNormal>[min_distance, best_path] =3D tspBranchBound(cost_matr=
ix);</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>formatted_path =3D join_path_with_arrow(best_path);</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Display the results</p>

<p class=3DMsoNormal>disp(&quot;Shortest distance covering all cities is: &=
quot;
+ string(min_distance));</p>

<p class=3DMsoNormal>disp(&quot;Best path for the tour is: &quot; +
formatted_path);</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal style=3D'margin-left:0in;text-indent:0in;mso-list:l4 l=
evel1 lfo4;
tab-stops:15.6pt'><![if !supportLists]><b><span style=3D'mso-fareast-font-f=
amily:
Calibri;mso-fareast-theme-font:minor-latin;mso-bidi-font-family:Calibri;
mso-bidi-theme-font:minor-latin'><span style=3D'mso-list:Ignore'>22.<span
style=3D'font:7.0pt "Times New Roman"'>&nbsp; </span></span></span></b><![e=
ndif]><b>Write
a program to find the minimum cost spanning tree using Prim&#8217;s Algorit=
hm.<o:p></o:p></b></p>

<p class=3DMsoNormal>// Function to implement Prim's algorithm and find the=
 MST</p>

<p class=3DMsoNormal>function [mst, total_cost] =3D primsMST(graph, N)</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>//
Initialize the key values and parent array</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>key
=3D ones(1, N) * %inf;<span style=3D'mso-spacerun:yes'>&nbsp; </span>// Key=
 values
of vertices</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>parent =3D zeros(1, N);<span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>// Parent =
array
to store MST</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>mst
=3D zeros(1, N);<span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>// Array to track MST inclusion (1 if in MST, 0 if not)</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>key(1) =3D 0;<span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>// Starting from vertex 1 (index 1 in Scilab)</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span></p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>total_cost =3D 0;<span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;
</span>// Variable to store the total cost of MST</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span></p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>for
count =3D 1:N</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n>//
Find the vertex with the minimum key value</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n>u =3D
-1;</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>min_key =3D %inf;</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n></p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n>for
i =3D 1:N</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;
</span>if mst(i) =3D=3D 0 &amp; key(i) &lt; min_key then</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>min_key =3D key(i);</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>u =3D i;</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;
</span>end</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n>end</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n></p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n>//
Include vertex u in MST</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>mst(u) =3D 1;</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>total_cost =3D total_cost + key(u);<span style=3D'mso-spacerun:yes'>=
&nbsp;
</span>// Add the edge weight to total cost</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n></p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n>//
Update the key values of adjacent vertices</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n>for
v =3D 1:N</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;
</span>if graph(u, v) &gt; 0 &amp; mst(v) =3D=3D 0 &amp; graph(u, v) &lt; k=
ey(v)
then</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>key(v) =3D graph(u, v);<span style=3D'mso-spacerun:yes'>&nbsp; </spa=
n>//
Update key value</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>parent(v) =3D u;<span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;
</span>// Set parent of vertex v</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;
</span>end</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n>end</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>end</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span></p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>//
Display the minimum spanning tree edges</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>disp(&quot;Edges in MST (parent, child, weight):&quot;);</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>for
i =3D 2:N<span style=3D'mso-spacerun:yes'>&nbsp; </span>// Starting from th=
e second
vertex (since the first one is arbitrary)</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>disp([parent(i), i, graph(parent(i), i)]);</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>end</p>

<p class=3DMsoNormal>endfunction</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Example graph (adjacency matrix) representation of a
connected undirected graph</p>

<p class=3DMsoNormal>graph =3D [</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>0,
2, 0, 6, 0;<span style=3D'mso-spacerun:yes'>&nbsp; </span>// Vertex 1 conne=
ctions</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>2,
0, 3, 8, 5;<span style=3D'mso-spacerun:yes'>&nbsp; </span>// Vertex 2 conne=
ctions</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>0,
3, 0, 0, 7;<span style=3D'mso-spacerun:yes'>&nbsp; </span>// Vertex 3 conne=
ctions</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>6,
8, 0, 0, 9;<span style=3D'mso-spacerun:yes'>&nbsp; </span>// Vertex 4 conne=
ctions</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>0,
5, 7, 9, 0<span style=3D'mso-spacerun:yes'>&nbsp;&nbsp; </span>// Vertex 5
connections</p>

<p class=3DMsoNormal>];</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Number of vertices</p>

<p class=3DMsoNormal>N =3D size(graph, 1);</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Call the Prim's algorithm function to find the MST<=
/p>

<p class=3DMsoNormal>[mst, total_cost] =3D primsMST(graph, N);</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Display the total cost of the MST</p>

<p class=3DMsoNormal>disp(&quot;Total cost of the Minimum Spanning Tree
(MST):&quot;);</p>

<p class=3DMsoNormal>disp(total_cost);</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal style=3D'margin-left:0in;text-indent:0in;mso-list:l4 l=
evel1 lfo4;
tab-stops:15.6pt'><![if !supportLists]><b><span style=3D'mso-fareast-font-f=
amily:
Calibri;mso-fareast-theme-font:minor-latin;mso-bidi-font-family:Calibri;
mso-bidi-theme-font:minor-latin'><span style=3D'mso-list:Ignore'>23.<span
style=3D'font:7.0pt "Times New Roman"'>&nbsp; </span></span></span></b><![e=
ndif]><b>Write
a Scilab program to find a subset of a given set S =3D {sl,s2,.....,sn} of n
positive integers whose sum is equal to a given positive integer d.A suitab=
le
message is to be displayed if the given problem instance doesn't have a
solution.<o:p></o:p></b></p>

<p class=3DMsoNormal>// Function to find a subset whose sum is equal to d</=
p>

<p class=3DMsoNormal>function subsetSum(S, n, d, currentSubset, currentInde=
x)</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>//
If we have reached the required sum, print the subset</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>if
d =3D=3D 0 then</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>disp(&quot;Subset found:&quot;);</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>disp(currentSubset);</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>return;</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>end</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span></p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>//
If all elements are processed and we haven't found the subset</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>if
currentIndex =3D=3D n then</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>return;</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>end</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span></p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>//
Case 1: Include the current element and recurse</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>currentSubset(currentIndex + 1) =3D S(currentIndex + 1); // Include =
the
element</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>subsetSum(S, n, d - S(currentIndex + 1), currentSubset, currentIndex=
 +
1);</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span></p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>//
Case 2: Exclude the current element and recurse</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>currentSubset(currentIndex + 1) =3D []; // Exclude the element</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>subsetSum(S, n, d, currentSubset, currentIndex + 1);</p>

<p class=3DMsoNormal>endfunction</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Main function to start the backtracking process</p>

<p class=3DMsoNormal>function findSubset(S, n, d)</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>//
Start with an empty subset and begin with the first element</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>currentSubset =3D [];</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>subsetSum(S, n, d, currentSubset, 0);</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span></p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>//
If no subset is found, print a message</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>disp(&quot;No subset with the given sum exists.&quot;);</p>

<p class=3DMsoNormal>endfunction</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Example usage:</p>

<p class=3DMsoNormal>S =3D [3, 34, 4, 12, 5, 2];<span
style=3D'mso-spacerun:yes'>&nbsp; </span>// The set of integers</p>

<p class=3DMsoNormal>d =3D 9;<span style=3D'mso-spacerun:yes'>&nbsp; </span=
>// The
target sum</p>

<p class=3DMsoNormal>n =3D length(S);<span style=3D'mso-spacerun:yes'>&nbsp;
</span>// Number of elements in the set</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>findSubset(S, n, d);<span style=3D'mso-spacerun:yes'>&=
nbsp;
</span>// Call the function to find the subset</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal><b>24.Write a Scilab program to implement Job sequenci=
ng
with deadlines using Greedy<o:p></o:p></b></p>

<p class=3DMsoNormal><b>Method.<o:p></o:p></b></p>

<p class=3DMsoNormal>// Job class to store job details</p>

<p class=3DMsoNormal>function jobSeq =3D createJobStruct(job_id, deadline, =
profit)</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>jobSeq.id =3D job_id;</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>jobSeq.deadline =3D deadline;</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>jobSeq.profit =3D profit;</p>

<p class=3DMsoNormal>endfunction</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Function to perform job sequencing with deadlines</=
p>

<p class=3DMsoNormal>function jobSequence(jobs, n)</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>//
Sort jobs based on decreasing profit</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>for
i =3D 1:n-1</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n>for
j =3D 1:n-i</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;
</span>if jobs(j).profit &lt; jobs(j+1).profit then</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>temp =3D jobs(j);</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>jobs(j) =3D jobs(j+1);</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>jobs(j+1) =3D temp;</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;
</span>end</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n>end</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>end</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span></p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>//
Initialize the result array to store the scheduled jobs</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>scheduledJobs =3D -ones(1, n); // -1 means the slot is empty</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>totalProfit =3D 0; // To keep track of total profit</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span></p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>//
Job sequence processing</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>for
i =3D 1:n</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n>//
Find a free slot for this job</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n>for
j =3D min(jobs(i).deadline, n):-1:1</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;
</span>if scheduledJobs(j) =3D=3D -1 then</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>// Schedule job in this slot</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>scheduledJobs(j) =3D jobs(i).id;</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>totalProfit =3D totalProfit + jobs(i).profit;</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span style=3D'mso-spacerun:yes'>&nbsp;</span>break;</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;
</span>end</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n>end</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>end</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span></p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>//
Output the job sequence and total profit</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>disp(&quot;Job sequence for maximum profit:&quot;);</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>disp(scheduledJobs);</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>disp(&quot;Total profit:&quot;);</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>disp(totalProfit);</p>

<p class=3DMsoNormal>endfunction</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Example usage:</p>

<p class=3DMsoNormal>jobs =3D [</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>createJobStruct(1, 2, 100),</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>createJobStruct(2, 1, 19),</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>createJobStruct(3, 2, 27),</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>createJobStruct(4, 1, 25),</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>createJobStruct(5, 3, 15)</p>

<p class=3DMsoNormal>];</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>n =3D length(jobs); // Number of jobs</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Call the job sequencing function</p>

<p class=3DMsoNormal>jobSequence(jobs, n);</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal><b>25.Write a Scilab program to find a solution for the
knapsack problem using greedy<o:p></o:p></b></p>

<p class=3DMsoNormal><b>method.<o:p></o:p></b></p>

<p class=3DMsoNormal>// Function to solve Knapsack problem using Greedy met=
hod</p>

<p class=3DMsoNormal>function [total_value, selected_items] =3D
knapsackGreedy(weights, values, capacity, n)</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>//
Calculate the value-to-weight ratio for each item</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>ratio =3D values ./ weights;<span style=3D'mso-spacerun:yes'>&nbsp;
</span>// Ratio of value to weight for each item</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span></p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>//
Sort items by ratio in decreasing order</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>[sorted_ratios, indices] =3D gsort(ratio, &quot;d&quot;); // 'd' for
descending</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>sorted_weights =3D weights(indices);</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>sorted_values =3D values(indices);</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span></p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>//
Initialize variables</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>total_value =3D 0;<span style=3D'mso-spacerun:yes'>&nbsp; </span>// =
Total
value of the items selected</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>selected_items =3D zeros(1, n);<span style=3D'mso-spacerun:yes'>&nbs=
p;
</span>// Array to keep track of selected items (1 if selected)</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>remaining_capacity =3D capacity;<span style=3D'mso-spacerun:yes'>&nb=
sp;
</span>// Remaining capacity of the knapsack</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span></p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>//
Greedy selection of items</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>for
i =3D 1:n</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n>if
sorted_weights(i) &lt;=3D remaining_capacity then</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;
</span>// If the item can be fully taken</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;
</span>remaining_capacity =3D remaining_capacity - sorted_weights(i);</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;
</span>total_value =3D total_value + sorted_values(i);</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;
</span>selected_items(indices(i)) =3D 1;<span style=3D'mso-spacerun:yes'>&n=
bsp;
</span>// Mark this item as selected</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n>else</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;
</span>// If the item cannot be fully taken, take the fraction of it</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;
</span>fraction =3D remaining_capacity / sorted_weights(i);</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;
</span>total_value =3D total_value + sorted_values(i) * fraction;</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;
</span>selected_items(indices(i)) =3D fraction;<span
style=3D'mso-spacerun:yes'>&nbsp; </span>// Mark fractional selection</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>break=
;<span
style=3D'mso-spacerun:yes'>&nbsp; </span>// No more items can be selected a=
fter
taking the fractional item</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n>end</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>end</p>

<p class=3DMsoNormal>endfunction</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Example usage:</p>

<p class=3DMsoNormal>weights =3D [10, 20, 30];<span style=3D'mso-spacerun:y=
es'>&nbsp;
</span>// Weights of items</p>

<p class=3DMsoNormal>values =3D [60, 100, 120];<span
style=3D'mso-spacerun:yes'>&nbsp; </span>// Values of items</p>

<p class=3DMsoNormal>capacity =3D 50;<span style=3D'mso-spacerun:yes'>&nbsp;
</span>// Capacity of the knapsack</p>

<p class=3DMsoNormal>n =3D length(weights);<span style=3D'mso-spacerun:yes'=
>&nbsp;
</span>// Number of items</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Call the knapsackGreedy function to find the soluti=
on</p>

<p class=3DMsoNormal>[total_value, selected_items] =3D knapsackGreedy(weigh=
ts,
values, capacity, n);</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Display the results</p>

<p class=3DMsoNormal>disp(&quot;Total value of selected items:&quot;);</p>

<p class=3DMsoNormal>disp(total_value);</p>

<p class=3DMsoNormal>disp(&quot;Selection of items (1 for fully selected,
fraction for partially selected, 0 for not selected):&quot;);</p>

<p class=3DMsoNormal>disp(selected_items);</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal style=3D'margin-left:0in;text-indent:0in;mso-list:l0 l=
evel1 lfo5;
tab-stops:15.6pt'><![if !supportLists]><b><span style=3D'mso-fareast-font-f=
amily:
Calibri;mso-fareast-theme-font:minor-latin;mso-bidi-font-family:Calibri;
mso-bidi-theme-font:minor-latin'><span style=3D'mso-list:Ignore'>26.<span
style=3D'font:7.0pt "Times New Roman"'>&nbsp; </span></span></span></b><![e=
ndif]><b>Find
a subset of a given set S =3D {sl,s2,. ...,sn} of n positive integers whose=
 sum
is equal to a given positive integer d. For example, if S=3D {1, 2, 5, 6, 8=
} and
d =3D 9 there are two solutions{1,2,6}and{1,8}.A suitable message is to be
displayed if the a given problem instance doesn't have a solution.<o:p></o:=
p></b></p>

<p class=3DMsoNormal>// Function to print a subset</p>

<p class=3DMsoNormal>function printSubset(subset)</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>disp(&quot;Subset found:&quot;);</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>disp(subset);</p>

<p class=3DMsoNormal>endfunction</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Backtracking function to find the subset sum</p>

<p class=3DMsoNormal>function subsetSum(S, n, d, currentSubset, currentInde=
x)</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>//
Base case: if the sum of the current subset equals d, print it</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>if
d =3D=3D 0 then</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>printSubset(currentSubset);</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>return;</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>end</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>//
If we have gone through all the elements, return</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>if
currentIndex =3D=3D n then</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>return;</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>end</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>//
Case 1: Include the current element and recurse</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>currentSubset(currentIndex + 1) =3D S(currentIndex + 1);<span
style=3D'mso-spacerun:yes'>&nbsp; </span>// Include the element</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>subsetSum(S, n, d - S(currentIndex + 1), currentSubset, currentIndex=
 +
1);</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>//
Case 2: Exclude the current element and recurse</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>currentSubset(currentIndex + 1) =3D [];<span
style=3D'mso-spacerun:yes'>&nbsp; </span>// Exclude the element</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>subsetSum(S, n, d, currentSubset, currentIndex + 1);</p>

<p class=3DMsoNormal>endfunction</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Main function to find the subset sum</p>

<p class=3DMsoNormal>function findSubset(S, n, d)</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>//
Start with an empty subset and begin with the first element</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>currentSubset =3D [];</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>subsetSum(S, n, d, currentSubset, 0);</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span></p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>//
If no solution is found, print a message</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>disp(&quot;No subset with the given sum exists.&quot;);</p>

<p class=3DMsoNormal>endfunction</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Example usage:</p>

<p class=3DMsoNormal>S =3D [1, 2, 5, 6, 8];<span style=3D'mso-spacerun:yes'=
>&nbsp;
</span>// The set of integers</p>

<p class=3DMsoNormal>d =3D 9;<span style=3D'mso-spacerun:yes'>&nbsp; </span=
>// The
target sum</p>

<p class=3DMsoNormal>n =3D length(S);<span style=3D'mso-spacerun:yes'>&nbsp;
</span>// Number of elements in the set</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Call the findSubset function to check for the subse=
t sum</p>

<p class=3DMsoNormal>findSubset(S, n, d);</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal style=3D'margin-left:0in;text-indent:0in;mso-list:l0 l=
evel1 lfo5;
tab-stops:15.6pt'><![if !supportLists]><b><span style=3D'mso-fareast-font-f=
amily:
Calibri;mso-fareast-theme-font:minor-latin;mso-bidi-font-family:Calibri;
mso-bidi-theme-font:minor-latin'><span style=3D'mso-list:Ignore'>27.<span
style=3D'font:7.0pt "Times New Roman"'>&nbsp; </span></span></span></b><![e=
ndif]><b>Let
there be N workers and N jobs. Any worker can be assigned to perform any jo=
b,
incurring some cost that may vary depending on the work-job assignment. It =
is
required to perform all jobs by assigning exactly one worker to each job and
exactly one job to each agent in such a way that the total cost of the
assignment is minimized. Write a Scilab program to solve this problem.<o:p>=
</o:p></b></p>

<p class=3DMsoNormal>// Function to solve the assignment problem using the
Hungarian algorithm</p>

<p class=3DMsoNormal>function [assignment, min_cost] =3D
solveAssignmentProblem(cost_matrix)</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>//
Use the built-in linear_sum_assignment function to solve the problem</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>[assignment, min_cost] =3D linear_sum_assignment(cost_matrix);</p>

<p class=3DMsoNormal>endfunction</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Example usage:</p>

<p class=3DMsoNormal>N =3D 4;<span style=3D'mso-spacerun:yes'>&nbsp; </span=
>// Number
of workers (or jobs)</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Example cost matrix (4 workers and 4 jobs)</p>

<p class=3DMsoNormal>cost_matrix =3D [</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>10,
2, 8, 7;</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>6,
5, 7, 4;</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>3,
9, 4, 6;</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>8,
6, 7, 9</p>

<p class=3DMsoNormal>];</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Call the function to get the optimal assignment and=
 the
minimum cost</p>

<p class=3DMsoNormal>[assignment, min_cost] =3D
solveAssignmentProblem(cost_matrix);</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Display the results</p>

<p class=3DMsoNormal>disp(&quot;Optimal Assignment (Worker -&gt; Job):&quot=
;);</p>

<p class=3DMsoNormal>disp(assignment);</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>disp(&quot;Minimum Total Cost:&quot;);</p>

<p class=3DMsoNormal>disp(min_cost);</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal style=3D'margin-left:0in;text-indent:0in;mso-list:l0 l=
evel1 lfo5;
tab-stops:15.6pt'><![if !supportLists]><b><span style=3D'mso-fareast-font-f=
amily:
Calibri;mso-fareast-theme-font:minor-latin;mso-bidi-font-family:Calibri;
mso-bidi-theme-font:minor-latin'><span style=3D'mso-list:Ignore'>28.<span
style=3D'font:7.0pt "Times New Roman"'>&nbsp; </span></span></span></b><![e=
ndif]><b>Implement
0/1 Knapsack problem using Dynamic Programming.<o:p></o:p></b></p>

<p class=3DMsoNormal>// Function to solve the 0/1 Knapsack problem using Dy=
namic
Programming</p>

<p class=3DMsoNormal>function max_value =3D knapsack0_1(values, weights, W,=
 n)</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>//
Create a DP table with dimensions (n+1) x (W+1)</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>dp
=3D zeros(n+1, W+1);</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp; </span><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;</span>// Fill the DP table</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>for
i =3D 1:n</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n>for
w =3D 0:W</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;
</span>if weights(i) &lt;=3D w then</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>dp(i+1, w+1) =3D max(dp(i, w+1), dp(i, w - weights(i) + 1) + values(=
i));</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;
</span>else</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>dp(i+1, w+1) =3D dp(i, w+1);<span style=3D'mso-spacerun:yes'>&nbsp;
</span>// If the item is too heavy, don't include it</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;
</span>end</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n>end</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>end</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>//
The maximum value will be in dp[n][W]</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>max_value =3D dp(n+1, W+1);</p>

<p class=3DMsoNormal>endfunction</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Example usage:</p>

<p class=3DMsoNormal>values =3D [60, 100, 120];<span
style=3D'mso-spacerun:yes'>&nbsp; </span>// Values of the items</p>

<p class=3DMsoNormal>weights =3D [10, 20, 30];<span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp; </span>// Weights of the items</p>

<p class=3DMsoNormal>W =3D 50;<span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>// Capacity of the knapsack</p>

<p class=3DMsoNormal>n =3D length(values);<span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>// N=
umber
of items</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Call the knapsack function to get the maximum value=
</p>

<p class=3DMsoNormal>max_value =3D knapsack0_1(values, weights, W, n);</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Display the result</p>

<p class=3DMsoNormal>disp(&quot;Maximum value in the knapsack:&quot;);</p>

<p class=3DMsoNormal>disp(max_value);</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal><b>29.Design and implement in Scilab to find all Hamil=
tonian
Cycles in a connected<o:p></o:p></b></p>

<p class=3DMsoNormal><b>undirected Graph G of n vertices using backtracking
principle.<o:p></o:p></b></p>

<p class=3DMsoNormal>// Function to print the Hamiltonian cycle</p>

<p class=3DMsoNormal>function printCycle(path)</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>n =3D
length(path);</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>for
i =3D 1:n</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>disp(path(i));</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>end</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>disp(path(1)); // To show the cycle, return to the start</p>

<p class=3DMsoNormal>endfunction</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Backtracking function to find all Hamiltonian cycle=
s</p>

<p class=3DMsoNormal>function findHamiltonianCycles(graph, path, pos, n)</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>//
Base case: If all vertices are included in the cycle</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>if
pos =3D=3D n then</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n>//
If there is an edge from the last vertex to the first one, print the cycle<=
/p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n>if
graph(path(n), path(1)) =3D=3D 1 then</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;
</span>printCycle(path);</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n>end</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>return;</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>end</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>//
Try different vertices as the next candidate in the cycle</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>for
v =3D 2:n</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n>//
Check if this vertex can be added to the cycle</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n>if
isSafe(graph, path, v, pos, n) then</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;
</span>path(pos + 1) =3D v;<span style=3D'mso-spacerun:yes'>&nbsp; </span>/=
/ Add
vertex v to the path</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;
</span>// Recur to find the next vertex</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;
</span>findHamiltonianCycles(graph, path, pos + 1, n);</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;
</span>// Backtrack: Remove the vertex and try another one</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;
</span>path(pos + 1) =3D -1;</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n>end</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>end</p>

<p class=3DMsoNormal>endfunction</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Helper function to check if a vertex can be added t=
o the
path</p>

<p class=3DMsoNormal>function safe =3D isSafe(graph, path, v, pos, n)</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>//
Check if the vertex v is an adjacent vertex to the previous vertex</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>if
graph(path(pos), v) =3D=3D 0 then</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n>safe
=3D %f;</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>return;</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>end</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>//
Check if the vertex has already been included in the path</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>for
i =3D 1:pos-1</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n>if
path(i) =3D=3D v then</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;
</span>safe =3D %f;</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;=
&nbsp;&nbsp;&nbsp;
</span>return;</p>

<p class=3DMsoNormal><span
style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </spa=
n>end</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>end</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>safe =3D %t;</p>

<p class=3DMsoNormal>endfunction</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Main function to initiate the search for Hamiltonian
cycles</p>

<p class=3DMsoNormal>function hamiltonianCycle(graph, n)</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>//
Initialize the path with -1 (no vertices included yet)</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>path =3D -ones(1, n);</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>path(1) =3D 1; // Start from the first vertex (arbitrary choice)</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span></p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>//
Find all Hamiltonian cycles</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp;
</span>findHamiltonianCycles(graph, path, 1, n);</p>

<p class=3DMsoNormal>endfunction</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Example usage:</p>

<p class=3DMsoNormal>// Create an adjacency matrix representing the graph</=
p>

<p class=3DMsoNormal>// Graph with 4 vertices, where graph[i][j] =3D 1 mean=
s there
is an edge between i and j</p>

<p class=3DMsoNormal>graph =3D [</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>0,
1, 1, 1;</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>1,
0, 1, 1;</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>1,
1, 0, 1;</p>

<p class=3DMsoNormal><span style=3D'mso-spacerun:yes'>&nbsp;&nbsp;&nbsp; </=
span>1,
1, 1, 0</p>

<p class=3DMsoNormal>];</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Number of vertices in the graph</p>

<p class=3DMsoNormal>n =3D 4;</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

<p class=3DMsoNormal>// Call the function to find and print all Hamiltonian
cycles</p>

<p class=3DMsoNormal>hamiltonianCycle(graph, n);</p>

<p class=3DMsoNormal><o:p>&nbsp;</o:p></p>

</div>

</body>

</html>

------=_NextPart_01DB49C6.CF2CBED0
Content-Location: file:///C:/E0C362E5/QUESTIONBANK76_files/themedata.thmx
Content-Transfer-Encoding: base64
Content-Type: application/vnd.ms-officetheme

UEsDBBQABgAIAAAAIQDp3g+//wAAABwCAAATAAAAW0NvbnRlbnRfVHlwZXNdLnhtbKyRy07DMBBF
90j8g+UtSpyyQAgl6YLHjseifMDImSQWydiyp1X790zSVEKoIBZsLNkz954743K9Hwe1w5icp0qv
8kIrJOsbR12l3zdP2a1WiYEaGDxhpQ+Y9Lq+vCg3h4BJiZpSpXvmcGdMsj2OkHIfkKTS+jgCyzV2
JoD9gA7NdVHcGOuJkTjjyUPX5QO2sB1YPe7l+Zgk4pC0uj82TqxKQwiDs8CS1Oyo+UbJFkIuyrkn
9S6kK4mhzVnCVPkZsOheZTXRNajeIPILjBLDsAyJX89nIBkt5r87nons29ZZbLzdjrKOfDZezE7B
/xRg9T/oE9PMf1t/AgAA//8DAFBLAwQUAAYACAAAACEApdan58AAAAA2AQAACwAAAF9yZWxzLy5y
ZWxzhI/PasMwDIfvhb2D0X1R0sMYJXYvpZBDL6N9AOEof2giG9sb69tPxwYKuwiEpO/3qT3+rov5
4ZTnIBaaqgbD4kM/y2jhdj2/f4LJhaSnJQhbeHCGo3vbtV+8UNGjPM0xG6VItjCVEg+I2U+8Uq5C
ZNHJENJKRds0YiR/p5FxX9cfmJ4Z4DZM0/UWUtc3YK6PqMn/s8MwzJ5PwX+vLOVFBG43lExp5GKh
qC/jU72QqGWq1B7Qtbj51v0BAAD//wMAUEsDBBQABgAIAAAAIQBreZYWgwAAAIoAAAAcAAAAdGhl
bWUvdGhlbWUvdGhlbWVNYW5hZ2VyLnhtbAzMTQrDIBBA4X2hd5DZN2O7KEVissuuu/YAQ5waQceg
0p/b1+XjgzfO3xTVm0sNWSycBw2KZc0uiLfwfCynG6jaSBzFLGzhxxXm6XgYybSNE99JyHNRfSPV
kIWttd0g1rUr1SHvLN1euSRqPYtHV+jT9yniResrJgoCOP0BAAD//wMAUEsDBBQABgAIAAAAIQCz
SKVfEwYAAEAZAAAWAAAAdGhlbWUvdGhlbWUvdGhlbWUxLnhtbOxZzYsbNxS/F/o/DHNvbe/6I17i
Dbv+yLbZTULspOQoe+QZxZrRIMm78a0kp14KhbTk0EDppYcSGkigpQ30j9mSkKaQf6FPmvFYsuXu
B3sIJbsXW/N7Tz+99/R70vjylfsx9Q4xF4QlLb/yadn3cDJiAUnCln970Pvkku8JiZIAUZbglj/D
wr+y/fFHl9GWjHCMPbBPxBZq+ZGU6VapJEYwjMSnLMUJPBszHiMJX3lYCjg6Ar8xLW2Uy/VSjEji
ewmKwe2N8ZiMsPfXb3+8+fGxvz333qUwRSKFGhhR3le+sWWiscGkohBiJtqUe4eItnyYKGBHA3xf
+h5FQsKDll/Wf35p+3IJbeVGVK6xNex6+i+3yw2CyYaek4fDYtJqtVat7xT+NYDKVVy30a1364U/
DUCjEaw042L6rO02dzu1HGuAso8O351GZ7Ni4Q3/myucd2rq38JrUOa/uoLv9doQRQuvQRm+toKv
Vhsb7aqF16AMX1/BN8o7nWrDwmtQREkyWUGXa/XN9ny1BWTM6J4T3qxVe42N3PkCBdVQVJeaYswS
ua7WYnSP8R4AFJAiSRJPzlI8RiMo4zaiZMiJt0/CSKpp0BZGxvNsaCRWhtSMnhhxksqW/3mKYGMs
vL57+fTdy+fe8YMXxw9+PX748PjBL5kjy2oPJaFp9fanb/558qX39/Mf3j761o0XJv71069e//6n
SX3ZPWylBalX3z17/eLZq8dfv/n5kcP7DkdDEz4gMRbedXzk3WIxLE/Hxp4AD/nZLAYRIqbFThIK
lCA1i8N/V0YW+voMUeTA7WI7jnc4SIkLeHV6zyLcj/hUEofHa1FsAQ8Yo7uMO6NwTc1lhHkwTUL3
5Hxq4m4hdOiau40SK8vdaQoaSlwu2xG2aN6kKJEoxAmWnnrGJhg7VneXECuuB2TEmWBj6d0l3i4i
zpAMyNCqpoXRHokhLzMXQci3FZuDO94uo65Vd/ChjYS9gaiD/ABTK4xX0VSi2OVygGJqBnwfychF
sj/jIxPXFRIyHWLKvG6AhXDZ3OCwXiPp10BG3Gk/oLPYRnJJJi6f+4gxE9lhk3aE4tSF7ZMkMrGf
iQmUKPJuMumCHzB7h6jvkAeUrE33HYKtdJ+sBrdBQU1KiwJRT6bckcurmFn125/RMcJaakDgLd2O
SXKiiGczXJx8g1S++v6Jg/fFCLfbsRX1M0r2DifOPbO3JNTrcMvy3GY8IO+/OnfQNLmJYUOstqgP
4vxBnP3/vTiv288XL8kLFQaBVofB7NCtj+Dx2hP4mFDalzOK94U+hAvoPUEPBpWdvn7i4kaWRvBR
7WSYwMKFHGkbjzP5BZFRP0IpHOArvnISitx1KLyUCbg46mGnb4Wn0/iABdnFs1JRl8xMPASSi/Fy
rRiHS4PM0PXG4jJVuNdsQ33pnRNQtmchYUxmk9h0kGjMB1WQ9BUbguYgoVd2ISyaDhaXlPt5qlZY
ALUiK3A48uBI1fJrVTABI7g5IYoDlacs1fPs6mReZKbXBdOqgDK83sgrYJHppuK6dnlqdVmpnSLT
Fgmj3GwSOjK6h4kIBTivTjV6GhpnzXVzkVKLngpFHguDRuPSf7E4b67BblkbaGIqBU28o5Zf36xB
yYxQ2vLHcIGHj3EKtSPUoRbREF6DjSTPNvx5lCXlQnaQiLKAa9HJ1CAmEnOPkrjlq+UXaaCJ1hDN
rbIBgvDekmuCrLxv5CDpdpLxeIxH0ky7MaIinX0Fhc+0wvlUm58frCzZFNLdj4Ijb0in/BaCEqs1
KiqAARHwlqeSRTMg8GKyELJF/S01plx2zTeDuoaycUTTCOUdxRTzDK6lvKCjvxUxML7la4aAGiHJ
G+EwVA3WDKrVTYuukXFY23VPNlKRM0Rz0TMtVVFd061i1gzzNrAUy/M1eYPVPMTQLs0On0n3suQ2
51q3dE4ougQEvIifo+ueoiEY1BaTWdQU41UZVpqdj9q9Y77AE6idpkkYql+fu12KW9EjnNPB4Lk6
P9gtVy0MjefnSh1p/ROG+SMDG94D8ejA69wplUKnEn5C4AgORH19JilkQ5tu/wsAAP//AwBQSwME
FAAGAAgAAAAhAA3RkJ+2AAAAGwEAACcAAAB0aGVtZS90aGVtZS9fcmVscy90aGVtZU1hbmFnZXIu
eG1sLnJlbHOEj00KwjAUhPeCdwhvb9O6EJEm3YjQrdQDhOQ1DTY/JFHs7Q2uLAguh2G+mWm7l53J
E2My3jFoqhoIOumVcZrBbbjsjkBSFk6J2TtksGCCjm837RVnkUsoTSYkUiguMZhyDidKk5zQilT5
gK44o49W5CKjpkHIu9BI93V9oPGbAXzFJL1iEHvVABmWUJr/s/04GolnLx8WXf5RQXPZhQUoosbM
4CObqkwEylu6usTfAAAA//8DAFBLAQItABQABgAIAAAAIQDp3g+//wAAABwCAAATAAAAAAAAAAAA
AAAAAAAAAABbQ29udGVudF9UeXBlc10ueG1sUEsBAi0AFAAGAAgAAAAhAKXWp+fAAAAANgEAAAsA
AAAAAAAAAAAAAAAAMAEAAF9yZWxzLy5yZWxzUEsBAi0AFAAGAAgAAAAhAGt5lhaDAAAAigAAABwA
AAAAAAAAAAAAAAAAGQIAAHRoZW1lL3RoZW1lL3RoZW1lTWFuYWdlci54bWxQSwECLQAUAAYACAAA
ACEAs0ilXxMGAABAGQAAFgAAAAAAAAAAAAAAAADWAgAAdGhlbWUvdGhlbWUvdGhlbWUxLnhtbFBL
AQItABQABgAIAAAAIQAN0ZCftgAAABsBAAAnAAAAAAAAAAAAAAAAAB0JAAB0aGVtZS90aGVtZS9f
cmVscy90aGVtZU1hbmFnZXIueG1sLnJlbHNQSwUGAAAAAAUABQBdAQAAGAoAAAAA

------=_NextPart_01DB49C6.CF2CBED0
Content-Location: file:///C:/E0C362E5/QUESTIONBANK76_files/colorschememapping.xml
Content-Transfer-Encoding: quoted-printable
Content-Type: text/xml

<?xml version=3D"1.0" encoding=3D"UTF-8" standalone=3D"yes"?>
<a:clrMap xmlns:a=3D"http://schemas.openxmlformats.org/drawingml/2006/main"=
 bg1=3D"lt1" tx1=3D"dk1" bg2=3D"lt2" tx2=3D"dk2" accent1=3D"accent1" accent=
2=3D"accent2" accent3=3D"accent3" accent4=3D"accent4" accent5=3D"accent5" a=
ccent6=3D"accent6" hlink=3D"hlink" folHlink=3D"folHlink"/>
------=_NextPart_01DB49C6.CF2CBED0
Content-Location: file:///C:/E0C362E5/QUESTIONBANK76_files/filelist.xml
Content-Transfer-Encoding: quoted-printable
Content-Type: text/xml; charset="utf-8"

<xml xmlns:o=3D"urn:schemas-microsoft-com:office:office">
 <o:MainFile HRef=3D"../QUESTIONBANK76.htm"/>
 <o:File HRef=3D"themedata.thmx"/>
 <o:File HRef=3D"colorschememapping.xml"/>
 <o:File HRef=3D"filelist.xml"/>
</xml>
------=_NextPart_01DB49C6.CF2CBED0--
